# -*- coding: utf-8 -*-
# app/modules/telegram_handler.py
# –í–µ—Ä—Å–∏—è 8.4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π timeout –∫–æ–º–∞–Ω–¥–æ–π

import random
import re
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import traceback
import operator
import threading
from sqlalchemy.orm import Session
from decouple import config

from app.modules.database import SessionLocal, crud
from app.modules import gigachat_handler
from app.modules import state_calculator

# –ë–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ –Ω–∞ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
from app.modules.hot_reload import get_current_graph

# –û–ë–ù–û–í–õ–ï–ù–û: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π timeout –∫–æ–º–∞–Ω–¥–æ–π
from app.modules.timing_engine import process_node_timing, cancel_timeout_for_session, enable_timing, get_timing_status

user_sessions = {}

# –û–ë–ù–û–í–õ–ï–ù–û: –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö timeout (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö)
active_timeout_sessions = {}  # session_id -> {'target_node': str, 'node_id': str}

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–º ---
def is_final_node(node_data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –∫–æ–Ω–µ—á–Ω—ã–º –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏."""
    if not node_data:
        return True

    has_next_node = node_data.get("next_node_id") or node_data.get("then_node_id") or node_data.get("else_node_id")
    if has_next_node:
        return False

    if "options" in node_data and node_data["options"]:
        for option in node_data["options"]:
            if option.get("next_node_id"):
                return False

    if "branches" in node_data and node_data["branches"]:
        return False

    return True

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ---
def _evaluate_condition(condition_str: str, db: Session, user_id: int, session_id: int) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É-—É—Å–ª–æ–≤–∏–µ."""
    ops = {'>': operator.gt, '<': operator.lt, '>=': operator.ge, '<=': operator.le, '==': operator.eq, '!=': operator.ne}
    try:
        match = re.match(r'\{(\w+)\}\s*([<>=!]+)\s*(.+)', condition_str)
        if not match:
            print(f"–û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Å–ª–æ–≤–∏—è: {condition_str}")
            return False
        key, op_str, value_str = match.groups()
        actual_value_str = crud.get_user_state(db, user_id, session_id, key, '0')
        actual_value = float(actual_value_str)
        comparison_value = float(value_str.strip())
        return ops[op_str](actual_value, comparison_value)
    except (ValueError, KeyError, TypeError) as e:
        print(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è '{condition_str}': {e}")
        return False

# --- –ü–∞—Ä—Å–µ—Ä –º–∏–Ω–∏-DSL –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ò–ò ---
AI_PROACTIVE_REGEX = re.compile(r'^ai_proactive:\s*([a-zA-Z_][\w-]*)\s*\("([^"]+)")\s*$')

def parse_ai_proactive_command(type_field: str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É type —É–∑–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞: ai_proactive: role("–ª–æ–∫–∞–ª—å–Ω—ã–π_–ø—Ä–æ–º–ø—Ç")
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (role, local_prompt) –∏–ª–∏ (None, None), –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞.
    """
    if not isinstance(type_field, str):
        return None, None
    m = AI_PROACTIVE_REGEX.match(type_field.strip())
    if not m:
        return None, None
    role = m.group(1).strip()
    local_prompt = m.group(2).strip()
    return role, local_prompt

def register_handlers(bot: telebot.TeleBot, initial_graph_data: dict):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram-–±–æ—Ç–∞.
    initial_graph_data —Ç–µ–ø–µ—Ä—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º get_current_graph() –¥–ª—è hot-reload.
    """

    # –û–ë–ù–û–í–õ–ï–ù–û: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é timeout —Å–∏—Å—Ç–µ–º—É
    enable_timing()
    timing_status = get_timing_status()
    print(f"üïê Universal timeout system activated: {timing_status}")
    print(f"üöÄ Available timing commands: {timing_status.get('available_parsers', [])}")

    def _resume_after_pause(chat_id, next_node_id, temp_message_id=None):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–π–º–µ—Ä–æ–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ—Å–ª–µ –ø–∞—É–∑—ã."""
        if temp_message_id:
            try:
                bot.delete_message(chat_id, temp_message_id)
            except Exception as e:
                print(f"--- [–ü–ê–£–ó–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {temp_message_id}: {e} ---")
        send_node_message(chat_id, next_node_id)

    # –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ timeout fallback
    def handle_timeout_fallback(session_id: int, target_node: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ timeout"""
        print(f"[TIMEOUT] Timeout expired for session {session_id} ‚Üí target: {target_node}")

        # –ù–∞–π—Ç–∏ chat_id –ø–æ session_id
        chat_id = None
        for cid, sess_info in user_sessions.items():
            if sess_info.get('session_id') == session_id:
                chat_id = cid
                break

        if chat_id:
            # –û—á–∏—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π timeout
            if session_id in active_timeout_sessions:
                del active_timeout_sessions[session_id]

            # –ü–µ—Ä–µ–π—Ç–∏ –∫ target —É–∑–ª—É
            send_node_message(chat_id, target_node)
        else:
            print(f"[WARNING] Chat not found for session {session_id}")

    # --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
    def send_node_message(chat_id, node_id):
        db = SessionLocal()
        try:
            print(f"--- [–ù–ê–í–ò–ì–ê–¶–ò–Ø] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É–∑–µ–ª: {node_id} –¥–ª—è —á–∞—Ç–∞ {chat_id} ---")

            # –í—Å–µ–≥–¥–∞ –±–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ
            graph_data = get_current_graph()
            if not graph_data:
                bot.send_message(chat_id, "–°—Ü–µ–Ω–∞—Ä–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            node = graph_data["nodes"].get(str(node_id))
            session_info = user_sessions.get(chat_id)

            if not node:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")
                if chat_id in user_sessions: 
                    del user_sessions[chat_id]
                return

            if not session_info:
                bot.send_message(chat_id, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return

            session_info['node_id'] = node_id
            print(f"--- [–°–ï–°–°–ò–Ø] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª: {node_id} ---")

            user = crud.get_or_create_user(db, chat_id)
            node_type = node.get("type", "question")

            # --- –¢–∏–ø "pause" (–°–¢–ê–†–ê–Ø –°–ò–°–¢–ï–ú–ê - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ---
            if node_type == "pause":
                delay = float(node.get("delay", 1.0))
                next_node_id_next = node.get("next_node_id")
                pause_text = node.get("pause_text", "").replace('\n', '\n')
                temp_message_id = None
                if not next_node_id_next: 
                    return

                print(f"--- [–ü–ê–£–ó–ê-–°–¢–ê–†–ê–Ø] –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ {delay} —Å–µ–∫. –¥–ª—è —á–∞—Ç–∞ {chat_id}, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {next_node_id_next} ---")

                if pause_text:
                    sent_msg = bot.send_message(chat_id, pause_text, parse_mode="Markdown")
                    temp_message_id = sent_msg.message_id
                else:
                    bot.send_chat_action(chat_id, 'typing')

                threading.Timer(delay, _resume_after_pause, args=[chat_id, next_node_id_next, temp_message_id]).start()
                return

            # --- –¢–∏–ø "condition" ---
            if node_type == "condition":
                result = _evaluate_condition(node.get("condition_string", ""), db, user.id, session_info['session_id'])
                next_node_id_next = node.get("then_node_id") if result else node.get("else_node_id")
                if next_node_id_next: 
                    send_node_message(chat_id, next_node_id_next)
                return

            # --- –¢–∏–ø "randomizer" ---
            if node_type == "randomizer":
                branches = node.get("branches", [])
                if not branches: 
                    return
                weights = [branch.get("weight", 1) for branch in branches]
                chosen_branch = random.choices(branches, weights=weights, k=1)[0]
                next_node_id_next = chosen_branch.get("next_node_id")
                if next_node_id_next: 
                    send_node_message(chat_id, next_node_id_next)
                return

            # --- –ù–û–í–û–ï: –¢–∏–ø "ai_proactive" —Å –º–∏–Ω–∏-DSL ---
            ai_role, local_prompt = parse_ai_proactive_command(node_type)
            is_proactive = ai_role is not None and local_prompt is not None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–∑–ª–∞
            text_template = node.get("text", "")
            if node.get("type") == "state":
                text_template = node.get("state_message", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

            # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç —É–∑–ª–∞
            current_score_str = crud.get_user_state(db, user.id, session_info['session_id'], 'score', '0')
            capital_before_str = crud.get_user_state(db, user.id, session_info['session_id'], 'capital_before', '0')
            state_variables = {'score': int(float(current_score_str)), 'capital_before': int(float(capital_before_str))}
            try:
                formatted_text = text_template.format(**state_variables)
            except (KeyError, ValueError):
                formatted_text = text_template
            final_text_to_send = formatted_text.replace('\n', '\n')

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            markup = InlineKeyboardMarkup()
            options = node.get("options", [])
            callback_prefix = f"{node_id}"

            # –ï—Å–ª–∏ —É–∑–µ–ª –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—É—é —Ä–µ–ø–ª–∏–∫—É –ò–ò –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º/–∫–Ω–æ–ø–∫–∞–º–∏
            if is_proactive:
                print(f"--- [AI-PROACTIVE] role={ai_role}, prompt='{local_prompt}', node={node_id} ---")
                opts_for_context = options
                if node.get("type") == "circumstance":
                    opts_for_context = [{"text": node.get("option_text", "–î–∞–ª–µ–µ")}]
                try:
                    system_prompt_context = crud.build_full_context_for_ai(
                        db=db,
                        session_id=session_info['session_id'],
                        user_id=user.id,
                        current_question=local_prompt,
                        options=opts_for_context,
                        event_type=node.get("event_type"),
                        ai_persona=ai_role
                    )
                    ai_message = gigachat_handler.get_ai_response(
                        user_message="",
                        system_prompt=system_prompt_context
                    )
                    if ai_message:
                        bot.send_message(chat_id, ai_message, parse_mode="Markdown")
                except Exception:
                    traceback.print_exc()

            # –î–∞–ª—å—à–µ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–∑–ª–∞

            if node.get("type") == "circumstance":
                # –û–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–î–∞–ª–µ–µ"
                markup.add(InlineKeyboardButton(
                    text=node.get('option_text', '–î–∞–ª–µ–µ'), 
                    callback_data=f"{callback_prefix}|0|{node.get('next_node_id')}"
                ))
            elif (node.get("type") in ["question", "task"] or "ai_proactive:" in str(node.get("type", ""))) and options:
                unconditional_next_id = node.get("next_node_id")

                # –†–ê–ù–î–û–ú–ò–ó–ê–¶–ò–Ø –û–ü–¶–ò–ô
                display_options = options.copy()
                original_indices = {}
                if node.get("randomize_options", False):
                    random.shuffle(display_options)
                    print(f"--- [–†–ê–ù–î–û–ú–ò–ó–ê–¶–ò–Ø] –û–ø—Ü–∏–∏ –¥–ª—è —É–∑–ª–∞ {node_id} –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã ---")

                for new_idx, option in enumerate(display_options):
                    original_idx = options.index(option)
                    original_indices[new_idx] = original_idx

                for new_idx, option in enumerate(display_options):
                    original_idx = original_indices[new_idx]
                    next_node_id_for_button = option.get("next_node_id") or unconditional_next_id
                    if not next_node_id_for_button: 
                        continue

                    markup.add(InlineKeyboardButton(
                        text=option["text"], 
                        callback_data=f"{callback_prefix}|{original_idx}|{next_node_id_for_button}"
                    ))

            # --- –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò –ö–ê–†–¢–ò–ù–û–ö ---
            image_id = node.get("image_id")
            if image_id:
                server_url = config("SERVER_URL")
                image_url = f"{server_url}/images/{image_id}"
                try:
                    bot.send_photo(
                        chat_id=chat_id,
                        photo=image_url,
                        caption=final_text_to_send,
                        reply_markup=markup,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ {image_url}. {e}")
                    bot.send_message(chat_id, f"{final_text_to_send}\n\n*(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)*", reply_markup=markup, parse_mode="Markdown")
            else:
                bot.send_message(chat_id, final_text_to_send, reply_markup=markup, parse_mode="Markdown")

            # –û–ë–ù–û–í–õ–ï–ù–û: –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê TIMEOUT –ö–û–ú–ê–ù–î–´
            timing_config = node.get("timing") or node.get("Timing") or node.get("–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)")
            if timing_config:
                print(f"--- [TIMING] –û–±—Ä–∞–±–æ—Ç–∫–∞ timing –¥–ª—è —É–∑–ª–∞ {node_id}: {timing_config} ---")

                # –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ timing —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é timeout –∫–æ–º–∞–Ω–¥—É
                if 'timeout:' in str(timing_config):
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π timeout –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ –∫–ª–∏–∫—É –∫–Ω–æ–ø–∫–∏
                    active_timeout_sessions[session_info['session_id']] = {
                        'node_id': node_id,
                        'timing_config': timing_config
                    }
                    print(f"[TIMEOUT] Registered timeout for session {session_info['session_id']}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ callback
                next_node_id_cb = (node.get("next_node_id") or 
                                   node.get("then_node_id") or 
                                   node.get("else_node_id"))

                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–∞—É–∑—ã
                pause_text = node.get("pause_text") or node.get("–¢–µ–∫—Å—Ç –ø–∞—É–∑—ã") or ""

                # –û–ë–ù–û–í–õ–ï–ù–û: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ timeout
                def timing_callback():
                    """Callback –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è timing –ø—Ä–æ—Ü–µ—Å—Å–∞"""
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ timeout_target_node –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    if hasattr(timing_callback, 'context') and 'timeout_target_node' in timing_callback.context:
                        target_node = timing_callback.context['timeout_target_node']
                        print(f"[TIMEOUT] Executing timeout transition: {target_node}")
                        handle_timeout_fallback(session_info['session_id'], target_node)
                    elif next_node_id_cb:
                        # –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
                        send_node_message(chat_id, next_node_id_cb)

                # –û–ë–ù–û–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ timeout
                context = {
                    'bot': bot,
                    'chat_id': chat_id,
                    'pause_text': pause_text,
                    'next_node_id': next_node_id_cb,  # –î–ª—è timeout:30s –±–µ–∑ override
                    'session_id': session_info['session_id']
                }

                process_node_timing(
                    user_id=user.id,
                    session_id=session_info['session_id'],
                    node_id=node_id,
                    timing_config=str(timing_config),
                    callback=timing_callback,
                    **context
                )
                
                # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ callback –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ timeout_target_node
                timing_callback.context = context
                
                return  # timing_engine —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç callback –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            if is_final_node(node):
                print(f"--- [–°–ï–°–°–ò–Ø] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —É–∑–ª–µ {node_id} ---")
                crud.end_session(db, session_info['session_id'])

                # –û–ë–ù–û–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö timeout –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
                if session_info['session_id'] in active_timeout_sessions:
                    del active_timeout_sessions[session_info['session_id']]

                if chat_id in user_sessions:
                    del user_sessions[chat_id]
                return

            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∑–ª–∞
            is_interactive_node = (
                node.get("type") == "circumstance" or
                node.get("type") == "input_text" or
                (node.get("options") and len(node.get("options")) > 0)
            )
            next_node_id_next = node.get("next_node_id")

            # –ù–û–í–û–ï: –µ—Å–ª–∏ —É–∑–µ–ª –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π –∏ –Ω–µ—Ç –æ–ø—Ü–∏–π ‚Äî –∞–≤—Ç–æ-–ø–µ—Ä–µ—Ö–æ–¥
            if is_proactive and (not node.get("options") or len(node.get("options")) == 0) and next_node_id_next:
                send_node_message(chat_id, next_node_id_next)
                return

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–∑–ª—ã —Å timing –ù–ï –î–ï–õ–ê–Æ–¢ –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥
            timing_check_for_auto = node.get("timing") or node.get("Timing") or node.get("–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)")
            if timing_check_for_auto:
                print(f"--- [TIMING] –£–∑–µ–ª {node_id} —Å–æ–¥–µ—Ä–∂–∏—Ç timing, –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω ---")
                return

            # –ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∑–ª–æ–≤ –ë–ï–ó timing
            if not is_interactive_node and next_node_id_next:
                send_node_message(chat_id, next_node_id_next)

        except Exception:
            print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ send_node_message –¥–ª—è —É–∑–ª–∞ {node_id}!!!")
            traceback.print_exc()
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
            if chat_id in user_sessions: 
                del user_sessions[chat_id]
        finally:
            db.close()

    @bot.message_handler(commands=['start'])
    def start_interview(message):
        chat_id = message.chat.id
        db = SessionLocal()
        try:
            graph_data = get_current_graph()
            if not graph_data:
                bot.send_message(chat_id, "–°—Ü–µ–Ω–∞—Ä–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            user = crud.get_or_create_user(db, telegram_id=chat_id)
            session = crud.create_session(db, user_id=user.id, graph_id=graph_data["graph_id"])
            user_sessions[chat_id] = {'session_id': session.id, 'node_id': None}
            send_node_message(chat_id, graph_data["start_node_id"])
        except Exception:
            traceback.print_exc()
        finally:
            db.close()

    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_query(call):
        """
        –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–º–µ–Ω—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ timeout
        """
        chat_id = call.message.chat.id
        session_data = user_sessions.get(chat_id)
        if not session_data:
            bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start.", show_alert=True)
            return

        # –û–ë–ù–û–í–õ–ï–ù–û: –û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ timeout –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
        session_id = session_data.get('session_id')
        if session_id and session_id in active_timeout_sessions:
            # –û—Ç–º–µ–Ω–∏—Ç—å timeout –≤ timing_engine
            success = cancel_timeout_for_session(session_id)
            if success:
                print(f"[TIMEOUT] Cancelled timeout for session {session_id} due to button press")

            # –£–¥–∞–ª–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
            del active_timeout_sessions[session_id]

        db = SessionLocal()
        try:
            node_id_from_call, button_idx_str, next_node_id = call.data.split('|', 2)
            button_idx = int(button_idx_str)

            graph_data = get_current_graph()
            if not graph_data:
                bot.answer_callback_query(call.id, "–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
                return

            node = graph_data["nodes"].get(node_id_from_call)
            if not node:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª–æ.", show_alert=True)
                return

            user = crud.get_or_create_user(db, chat_id)
            node_type = node.get("type")

            text_to_save_in_db = "N/A"
            pressed_button_text = "N/A"
            formula_to_execute = None

            if node_type == "circumstance":
                pressed_button_text = node.get("option_text", "–î–∞–ª–µ–µ")
                text_to_save_in_db = pressed_button_text
                formula_to_execute = node.get("formula")

            elif node_type in ["task", "question"] and node.get("options") and len(node["options"]) > button_idx:
                option_data = node["options"][button_idx]
                pressed_button_text = option_data.get('text', '')
                text_to_save_in_db = option_data.get('interpretation', pressed_button_text)
                formula_to_execute = option_data.get("formula")

            # –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É–∑–ª–æ–≤
            elif "ai_proactive:" in str(node_type) and node.get("options") and len(node["options"]) > button_idx:
                option_data = node["options"][button_idx]
                pressed_button_text = option_data.get('text', '')
                text_to_save_in_db = option_data.get('interpretation', pressed_button_text)
                formula_to_execute = option_data.get("formula")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if formula_to_execute:
                old_score_str = crud.get_user_state(db, user.id, session_data['session_id'], 'score', '0')
                crud.update_user_state(db, user.id, session_data['session_id'], 'capital_before', float(old_score_str))

                current_state = {'score': float(old_score_str)}
                new_score = state_calculator.calculate_new_state(formula_to_execute, current_state)
                if new_score is not None:
                    crud.update_user_state(db, user.id, session_data['session_id'], 'score', new_score)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if text_to_save_in_db != "N/A":
                node_text_for_db = node.get('text', '–¢–µ–∫—Å—Ç —É–∑–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                crud.create_response(
                    db,
                    session_id=session_data['session_id'],
                    node_id=node_id_from_call,
                    node_text=node_text_for_db,
                    answer_text=text_to_save_in_db
                )

            bot.answer_callback_query(call.id)

            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ / –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            try:
                original_template = node.get("text", "")
                score_str = crud.get_user_state(db, user.id, session_data['session_id'], 'score', '0')
                capital_before_str = crud.get_user_state(db, user.id, session_data['session_id'], 'capital_before', '0')
                try:
                    state_vars = {'score': int(float(score_str)), 'capital_before': int(float(capital_before_str))}
                    formatted_original = original_template.format(**state_vars)
                except (KeyError, ValueError):
                    formatted_original = original_template

                clean_original = formatted_original.replace('\n', '\n')
                new_text = f"{clean_original}\n\n*–í–∞—à –æ—Ç–≤–µ—Ç: {pressed_button_text}*"
                bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=new_text, reply_markup=None, parse_mode="Markdown")
            except Exception as e:
                print(f"--- [DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏: {e}")
                try:
                    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
                    bot.send_message(chat_id, f"‚úÖ *{pressed_button_text}*", parse_mode="Markdown")
                except Exception as e2:
                    print(f"--- [DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏: {e2}")
                    bot.send_message(chat_id, f"‚úÖ *{pressed_button_text}*", parse_mode="Markdown")

            send_node_message(chat_id, next_node_id)
        except Exception:
            traceback.print_exc()
        finally:
            db.close()

    @bot.message_handler(content_types=['text'])
    def handle_text_message(message):
        if message.text.startswith('/start'):
            start_interview(message)
            return

        chat_id = message.chat.id
        session_data = user_sessions.get(chat_id)

        if not session_data or not session_data.get('node_id'):
            bot.reply_to(message, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
            return

        current_node_id = session_data['node_id']

        graph_data = get_current_graph()
        if not graph_data:
            bot.reply_to(message, "–°—Ü–µ–Ω–∞—Ä–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        node = graph_data["nodes"].get(current_node_id)

        if is_final_node(node):
            bot.reply_to(message, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            if chat_id in user_sessions:
                del user_sessions[chat_id]
            return

        node_type = node.get("type", "question")

        if node_type == "input_text":
            user_input = message.text
            db = SessionLocal()
            try:
                node_text_for_db = node.get('text', '–¢–µ–∫—Å—Ç —É–∑–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                crud.create_response(db, session_id=session_data['session_id'], node_id=current_node_id, node_text=node_text_for_db, answer_text=user_input)
                next_node_id = node.get("next_node_id")
                if next_node_id:
                    send_node_message(chat_id, next_node_id)
            finally:
                db.close()

        elif node.get("ai_enabled", False):
            # –†–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ò–ò (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
            bot.send_chat_action(chat_id, 'typing')
            db = SessionLocal()
            try:
                user = crud.get_or_create_user(db, chat_id)
                options = node.get("options", [])
                if node.get("type") == "circumstance":
                    options = [{"text": node.get("option_text", "–î–∞–ª–µ–µ")}]

                ai_persona = node.get("ai_enabled", "–¥–∞")  # –ë–µ—Ä–µ–º –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "AI help"
                system_prompt_context = crud.build_full_context_for_ai(
                    db, session_data['session_id'], user.id,
                    node.get("text", ""), 
                    options,
                    node.get("event_type"),
                    ai_persona  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –ò–ò/—Ä–æ–ª—å
                )

                ai_answer = gigachat_handler.get_ai_response(user_message=message.text, system_prompt=system_prompt_context)

                if ai_answer:
                    crud.create_ai_dialogue(db, session_data['session_id'], current_node_id, message.text, ai_answer)
                    bot.reply_to(message, ai_answer, parse_mode="Markdown")
                    send_node_message(chat_id, current_node_id)
                else: 
                    bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")

            except Exception:
                traceback.print_exc()
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.")
            finally:
                db.close()

        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")