# -*- coding: utf-8 -*-

"""
R-Bot Telegram Handler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–∑–ª–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è

–û–ë–ù–û–í–õ–ï–ù–ò–Ø:
08.10.2025, 18:11 - –£–ë–†–ê–ù–´ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è PyLance –æ—à–∏–±–æ–∫
08.10.2025, 18:02 - –ò–°–ü–†–ê–í–õ–ï–ù–´ –∏–º–ø–æ—Ä—Ç—ã datetime –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ç—á–∞
08.10.2025, 17:19 - –î–û–ë–ê–í–õ–ï–ù —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π daily cutoff –ø–∞—Ç—á

"""

import json
import logging
import time
import threading
from datetime import datetime, date
from typing import Dict, List, Optional, Any
import re

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
try:
    from telebot import TeleBot
    from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
    TELEBOT_AVAILABLE = True
except ImportError:
    print("Warning: telebot not available")
    TELEBOT_AVAILABLE = False
    # –ó–∞–≥–ª—É—à–∫–∏
    class TeleBot:
        def __init__(self, token): pass
    class Message: pass
    class CallbackQuery: pass
    class InlineKeyboardMarkup: pass
    class InlineKeyboardButton: pass

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π R-Bot
try:
    from app.modules.timing_engine import (
        process_node_timing, 
        cancel_timeout_for_session, 
        enable_timing, 
        get_timing_status
    )
    TIMING_ENGINE_AVAILABLE = True
except ImportError:
    print("Warning: timing_engine not available")
    TIMING_ENGINE_AVAILABLE = False
    # –ó–∞–≥–ª—É—à–∫–∏
    def process_node_timing(*args, **kwargs): pass
    def cancel_timeout_for_session(*args): pass  
    def enable_timing(): pass
    def get_timing_status(): return {'enabled': False}

try:
    from app.modules.database.models import UserSession, SessionMessage, utc_now
    from app.modules.database import SessionLocal
    DATABASE_AVAILABLE = True
except ImportError:
    print("Warning: database modules not available")
    DATABASE_AVAILABLE = False
    # –ó–∞–≥–ª—É—à–∫–∏
    class UserSession: pass
    class SessionMessage: pass
    def utc_now(): return datetime.now()
    def SessionLocal(): return None

# –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π GigaChatClient
# try:
#     from app.utils.gigachat_client import GigaChatClient
# except ImportError:
#     print("Warning: GigaChatClient not available")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
logger = logging.getLogger(__name__)
bot = None
scenario_data = {}
user_sessions: Dict[int, Dict] = {}

def initialize_bot(telegram_token: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
    global bot
    if not TELEBOT_AVAILABLE:
        logger.error("TeleBot not available")
        return False

    bot = TeleBot(telegram_token)
    logger.info("Telegram bot initialized successfully")
    return True

def load_scenario(file_path: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    global scenario_data
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            scenario_data = json.load(file)
        logger.info(f"Scenario loaded from {file_path}")
        return True
    except Exception as e:
        logger.error(f"Failed to load scenario: {e}")
        return False

def get_node_by_id(node_id: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —É–∑–µ–ª —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ ID"""
    for node in scenario_data.get('nodes', []):
        if node.get('id') == node_id:
            return node
    return None

def is_final_node(node_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–º"""
    node = get_node_by_id(node_id)
    if not node:
        return True

    # –£–∑–µ–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –µ—Å–ª–∏ –Ω–µ—Ç next_node_id –∏ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫ —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
    has_next = node.get('next_node_id')
    has_buttons = node.get('buttons', [])

    if has_next:
        return False

    for button in has_buttons:
        if button.get('next_node_id'):
            return False

    return True

def send_node_message(chat_id: int, node_id: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∑–ª–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –≠–ö–°–¢–†–ï–ù–ù–´–ú DAILY CUTOFF –ü–ê–¢–ß–ï–ú

    –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–ê–¢–ß 08.10.2025 - –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ daily —Ü–∏–∫–ª–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ cutoff
    """

    # ============================================================================
    # üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô DAILY CUTOFF –ü–ê–¢–ß - 08.10.2025, 18:11 MSK (–ë–ï–ó –û–®–ò–ë–û–ö)
    # ============================================================================

    if node_id == 'daily_complete':
        current_date = datetime.now().date()
        cutoff_date = date(2025, 10, 8)  # –ñ–ï–°–¢–ö–û –ó–ê–®–ò–¢–û –ù–ê –°–ï–ì–û–î–ù–Ø

        print(f"[EMERGENCY-CUTOFF] Node: {node_id}")
        print(f"[EMERGENCY-CUTOFF] Current: {current_date}, Cutoff: {cutoff_date}")
        print(f"[EMERGENCY-CUTOFF] Should transition: {current_date >= cutoff_date}")
        logger.info(f"[EMERGENCY-CUTOFF] Checking cutoff: {current_date} >= {cutoff_date}")

        if current_date >= cutoff_date:
            print("[EMERGENCY-CUTOFF] TRIGGERING CUTOFF TRANSITION!")
            logger.info("[EMERGENCY-CUTOFF] TRIGGERING CUTOFF TRANSITION!")

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                cutoff_message = (
                    "üéâ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    "üìä –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞—Ö!\n\n"
                    "–¢–µ–ø–µ—Ä—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Å–µ–º—É –ø–µ—Ä–∏–æ–¥—É –Ω–∞–±–ª—é–¥–µ–Ω–∏–π..."
                )

                if bot and TELEBOT_AVAILABLE:
                    bot.send_message(chat_id, cutoff_message)
                    time.sleep(2)

                    # –ü–†–Ø–ú–û–ô –ø–µ—Ä–µ—Ö–æ–¥ –∫ final_questions
                    logger.info("[EMERGENCY-CUTOFF] Redirecting to final_questions...")
                    send_node_message(chat_id, 'final_questions')
                    return
                else:
                    print("[EMERGENCY-CUTOFF] Bot not available!")

            except Exception as e:
                logger.error(f"[EMERGENCY-CUTOFF] Failed: {e}")
                print(f"[EMERGENCY-CUTOFF] Error: {e}")
                # Fallback - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É

    # ============================================================================
    # –û–ë–´–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê send_node_message
    # ============================================================================

    global user_sessions

    if chat_id not in user_sessions:
        user_sessions[chat_id] = {
            'current_node': node_id,
            'session_data': {},
            'start_time': datetime.now()
        }
    else:
        user_sessions[chat_id]['current_node'] = node_id

    # –ü–æ–ª—É—á–∞–µ–º —É–∑–µ–ª –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
    node = get_node_by_id(node_id)
    if not node:
        logger.error(f"Node not found: {node_id}")
        if bot and TELEBOT_AVAILABLE:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: —É–∑–µ–ª —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    node_text = node.get('text', '')
    node_type = node.get('type', 'message')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    node_text = process_dynamic_content(node_text, user_sessions[chat_id].get('session_data', {}))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_keyboard(node.get('buttons', []))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if not bot or not TELEBOT_AVAILABLE:
            logger.error("Bot not available")
            return

        if keyboard:
            sent_message = bot.send_message(chat_id, node_text, reply_markup=keyboard)
        else:
            sent_message = bot.send_message(chat_id, node_text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if DATABASE_AVAILABLE:
            save_message_to_db(chat_id, node_id, node_text, sent_message.message_id)

        logger.info(f"Node message sent: {node_id} to chat {chat_id}")

    except Exception as e:
        logger.error(f"Failed to send message for node {node_id}: {e}")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ timing –∫–æ–º–∞–Ω–¥
    timing_config = node.get('timing', '')
    if timing_config and timing_config.strip() and TIMING_ENGINE_AVAILABLE:
        session_id = user_sessions[chat_id].get('session_id', chat_id)

        def timing_callback():
            """Callback –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è timing"""
            handle_next_node(chat_id, node)

        # –ó–∞–ø—É—Å–∫ timing engine
        try:
            process_node_timing(
                user_id=chat_id,
                session_id=session_id, 
                node_id=node_id,
                timing_config=timing_config,
                callback=timing_callback,
                bot=bot,
                chat_id=chat_id,
                node_text=node_text,
                buttons=node.get('buttons', []),
                pause_text=node.get('pause_text', '')
            )
        except Exception as e:
            logger.error(f"Timing engine error for node {node_id}: {e}")
            # Fallback - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É —Å—Ä–∞–∑—É
            handle_next_node(chat_id, node)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç timing –∫–æ–º–∞–Ω–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        if not keyboard and not is_final_node(node_id):
            handle_next_node(chat_id, node)

def handle_next_node(chat_id: int, current_node: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É"""
    next_node_id = current_node.get('next_node_id')

    if next_node_id:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
        send_node_message(chat_id, next_node_id)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
        buttons = current_node.get('buttons', [])
        if not buttons:
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            logger.info(f"Reached final node for chat {chat_id}")

def create_keyboard(buttons: List[Dict]) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫ —É–∑–ª–∞"""
    if not buttons or not TELEBOT_AVAILABLE:
        return None

    keyboard = InlineKeyboardMarkup()

    for button in buttons:
        button_text = button.get('text', '')
        button_data = button.get('next_node_id', button.get('id', ''))

        if button_text and button_data:
            keyboard.add(InlineKeyboardButton(button_text, callback_data=button_data))

    return keyboard

def process_dynamic_content(text: str, session_data: Dict) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ"""
    if not text:
        return text

    # –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞ {{variable_name}}
    def replace_variable(match):
        var_name = match.group(1)
        return str(session_data.get(var_name, f"{{{{ {var_name} }}}}"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    text = re.sub(r'\{\{\s*([^}]+)\s*\}\}', replace_variable, text)

    return text

def save_message_to_db(chat_id: int, node_id: str, text: str, message_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""
    if not DATABASE_AVAILABLE:
        print("Database not available, skipping save")
        return

    try:
        db = SessionLocal()
        if not db:
            return

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session = db.query(UserSession).filter(
            UserSession.chat_id == chat_id
        ).first()

        if not session:
            session = UserSession(
                chat_id=chat_id,
                current_node_id=node_id,
                session_data={},
                created_at=utc_now(),
                updated_at=utc_now()
            )
            db.add(session)
            db.flush()
        else:
            session.current_node_id = node_id
            session.updated_at = utc_now()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_record = SessionMessage(
            session_id=session.id,
            node_id=node_id,
            message_text=text,
            message_id=message_id,
            message_type='bot_message',
            created_at=utc_now()
        )
        db.add(message_record)

        db.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
        user_sessions[chat_id]['session_id'] = session.id

    except Exception as e:
        logger.error(f"Failed to save message to DB: {e}")
        if 'db' in locals() and db:
            db.rollback()
    finally:
        if 'db' in locals() and db:
            db.close()

# ============================================================================
# MESSAGE HANDLERS
# ============================================================================

def register_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    if not bot or not TELEBOT_AVAILABLE:
        logger.error("Bot not available, cannot register handlers")
        return

    @bot.message_handler(commands=['start'])
    def handle_start(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = message.chat.id
        logger.info(f"Start command from chat {chat_id}")

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é
        if chat_id in user_sessions:
            # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
            try:
                if TIMING_ENGINE_AVAILABLE:
                    session_id = user_sessions[chat_id].get('session_id', chat_id)
                    cancel_timeout_for_session(session_id)
            except Exception as e:
                logger.error(f"Failed to cancel timeout: {e}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        user_sessions[chat_id] = {
            'current_node': 'daily_start',
            'session_data': {},
            'start_time': datetime.now()
        }

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —É–∑–ª—É
        send_node_message(chat_id, 'daily_start')

    @bot.message_handler(commands=['status'])
    def handle_status(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat_id = message.chat.id

        if chat_id in user_sessions:
            session = user_sessions[chat_id]
            current_node = session.get('current_node', 'unknown')
            start_time = session.get('start_time', datetime.now())
            duration = datetime.now() - start_time

            try:
                if TIMING_ENGINE_AVAILABLE:
                    timing_status = get_timing_status().get('enabled', 'unknown')
                else:
                    timing_status = 'unavailable'
            except:
                timing_status = 'error'

            status_text = (
                f"üìä **–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏**\n\n"
                f"üîπ –¢–µ–∫—É—â–∏–π —É–∑–µ–ª: `{current_node}`\n"
                f"üîπ –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {duration}\n"
                f"üîπ Timing engine: {timing_status}"
            )
        else:
            status_text = "‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"

        bot.send_message(chat_id, status_text, parse_mode='Markdown')

    @bot.message_handler(content_types=['text'])
    def handle_text_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = message.chat.id
        text = message.text

        if chat_id not in user_sessions:
            bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_node = user_sessions[chat_id].get('current_node')
        user_sessions[chat_id]['session_data'][f'{current_node}_response'] = text

        # –û—Ç–º–µ–Ω—è–µ–º timeout –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            if TIMING_ENGINE_AVAILABLE:
                session_id = user_sessions[chat_id].get('session_id', chat_id)
                cancel_timeout_for_session(session_id)
        except Exception as e:
            logger.error(f"Failed to cancel timeout: {e}")

        logger.info(f"Text message from chat {chat_id}: {text}")

    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_query(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        chat_id = call.message.chat.id
        data = call.data

        logger.info(f"Callback query from chat {chat_id}: {data}")

        # –û—Ç–º–µ–Ω—è–µ–º timeout –µ—Å–ª–∏ –µ—Å—Ç—å
        if chat_id in user_sessions:
            try:
                if TIMING_ENGINE_AVAILABLE:
                    session_id = user_sessions[chat_id].get('session_id', chat_id)
                    cancel_timeout_for_session(session_id)
            except Exception as e:
                logger.error(f"Failed to cancel timeout: {e}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∑–ª—É —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ callback_data
        send_node_message(chat_id, data)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        bot.answer_callback_query(call.id)

# ============================================================================
# BOT POLLING
# ============================================================================

def start_bot_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
    if not bot or not TELEBOT_AVAILABLE:
        raise RuntimeError("Bot not available. Call initialize_bot() first.")

    logger.info("Starting bot polling...")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_handlers()

    # –í–∫–ª—é—á–∞–µ–º timing engine
    try:
        if TIMING_ENGINE_AVAILABLE:
            enable_timing()
    except Exception as e:
        logger.error(f"Failed to enable timing engine: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    try:
        bot.polling(none_stop=True, interval=0.5, timeout=60)
    except Exception as e:
        logger.error(f"Bot polling error: {e}")
        raise

def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    if bot:
        bot.stop_polling()
        logger.info("Bot stopped")

# ============================================================================
# –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
# ============================================================================

__all__ = [
    'initialize_bot',
    'load_scenario', 
    'send_node_message',
    'start_bot_polling',
    'stop_bot',
    'user_sessions'
]
