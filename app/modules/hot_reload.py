# app/modules/hot_reload.py
"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ graph_data –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
"""

import os
import json
import threading
import time
from typing import Optional, Callable

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
graph_data: Optional[dict] = None
current_graph_path: Optional[str] = None

def load_graph_from_file(filepath: str) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ —Ñ–∞–π–ª–∞."""
    with open(filepath, 'r', encoding='utf-8') as f:
        return json.load(f)

def reload_graph_data(filepath: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é graph_data –∏–∑ —Ñ–∞–π–ª–∞.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é.
    """
    global graph_data
    try:
        new_graph = load_graph_from_file(filepath)
        graph_data = new_graph
        print(f"[HOT-RELOAD] ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ {filepath}")
        print(f"[HOT-RELOAD] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–∑–ª–æ–≤: {len(graph_data) if graph_data else 0}")
    except Exception as e:
        print(f"[HOT-RELOAD] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        print(f"[HOT-RELOAD] –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.")

def watch_graph_file(filepath: str, poll_interval: int = 30):
    """
    –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ poll_interval —Å–µ–∫—É–Ω–¥.
    """
    try:
        last_mtime = os.path.getmtime(filepath)
        print(f"[HOT-RELOAD] –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {last_mtime}")
    except FileNotFoundError:
        print(f"[HOT-RELOAD] ‚ö†Ô∏è –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ watcher")
        last_mtime = 0

    while True:
        time.sleep(poll_interval)
        try:
            current_mtime = os.path.getmtime(filepath)
            if current_mtime > last_mtime:
                print(f"[HOT-RELOAD] üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞! –í—Ä–µ–º—è: {current_mtime}")
                reload_graph_data(filepath)
                last_mtime = current_mtime
        except FileNotFoundError:
            print(f"[HOT-RELOAD] ‚ö†Ô∏è –§–∞–π–ª {filepath} –∏—Å—á–µ–∑ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        except Exception as e:
            print(f"[HOT-RELOAD] ‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

def start_hot_reload(filepath: str, poll_interval: int = 30) -> threading.Thread:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è:
    1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    2. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π watcher –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    Args:
        filepath: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ü–µ–Ω–∞—Ä–∏—è
        poll_interval: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
    
    Returns:
        threading.Thread: –æ–±—ä–µ–∫—Ç –ø–æ—Ç–æ–∫–∞ watcher (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    """
    global current_graph_path
    current_graph_path = filepath
    
    print(f"[HOT-RELOAD] üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è")
    print(f"[HOT-RELOAD] –§–∞–π–ª: {filepath}")
    print(f"[HOT-RELOAD] –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {poll_interval} —Å–µ–∫—É–Ω–¥")
    
    # –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    reload_graph_data(filepath)
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    watcher_thread = threading.Thread(
        target=watch_graph_file,
        args=(filepath, poll_interval),
        daemon=True,
        name="GraphDataWatcher"
    )
    watcher_thread.start()
    
    print(f"[HOT-RELOAD] ‚úÖ Watcher –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    return watcher_thread

def get_current_graph() -> Optional[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é graph_data."""
    return graph_data
