# -*- coding: utf-8 -*-
"""
R-Bot Timing Engine - –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

–î–û–ë–ê–í–õ–ï–ù–û –í –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ô –í–ï–†–°–ò–ò:
- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ë–î
- print() –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
- –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ buttons
- –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å + –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
"""

import threading
import time
import re
import logging
from datetime import datetime, timedelta, date
from typing import Dict, Any, Callable, Optional, List, Set
import pytz

from app.modules.database.models import ActiveTimer, utc_now
from app.modules.database import SessionLocal

TIMING_ENABLED = True
logger = logging.getLogger(__name__)

class TimingEngine:
    """
    –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –≤–µ—Ä—Å–∏—è Timing Engine —Å Daily —Å–∏—Å—Ç–µ–º–æ–π
    """

    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if hasattr(self, 'initialized'):
            return

        print("üöÄ [DIAG] TimingEngine.__init__() started")

        self.enabled = TIMING_ENABLED
        self.active_timers: Dict[str, threading.Timer] = {}

        print("üîÑ [DIAG] Initializing parsers...")
        self.parsers = self._init_parsers()
        print("‚úÖ [DIAG] Parsers initialized")

        print("üîÑ [DIAG] Initializing executors...")
        self.executors = self._init_executors()
        print("‚úÖ [DIAG] Executors initialized")

        print("üîÑ [DIAG] Initializing presets...")
        self.presets = self._init_presets()
        print("‚úÖ [DIAG] Presets initialized")

        # –î–ª—è timeout –∑–∞–¥–∞—á
        self.cancelled_tasks: Set[int] = set()         
        self.active_timeouts: Dict[int, threading.Thread] = {}  
        self.debug_timers: Dict[int, Dict] = {}  

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã countdown —Å–æ–æ–±—â–µ–Ω–∏–π
        print("üîÑ [DIAG] Initializing countdown templates...")
        self.countdown_templates = self._init_countdown_templates()
        print("‚úÖ [DIAG] Countdown templates initialized")

        self.initialized = True

        logger.info(f"TimingEngine initialized with Daily system. Enabled: {self.enabled}")
        print(f"‚úÖ [DIAG] TimingEngine initialized with Daily system")
        print(f"‚úÖ [DIAG] Available commands: {list(self.parsers.keys())}")
        print(f"‚úÖ [DIAG] Daily system: Lightweight personal cron activated")

        if self.enabled:
            try:
                print("üîÑ [DIAG] Starting restore_timers_from_db()...")
                self.restore_timers_from_db()
                print("‚úÖ [DIAG] restore_timers_from_db() completed")

                print("üîÑ [DIAG] Starting cleanup_expired_timers()...")
                self.cleanup_expired_timers()
                print("‚úÖ [DIAG] cleanup_expired_timers() completed")
            except Exception as e:
                print(f"‚ùå [DIAG] Failed to restore/cleanup timers on init: {e}")
                logger.error(f"Failed to restore/cleanup timers on init: {e}")

    def _init_countdown_templates(self) -> Dict[str, Dict[str, str]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ countdown —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {
            'urgent': {'countdown': "üö® –í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å: {time}", 'final': "üö® –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!"},
            'choice': {'countdown': "‚è≥ –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑: {time}", 'final': "‚è∞ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ"},
            'decision': {'countdown': "‚è≥ –ù–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å: {time}", 'final': "‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ"},
            'answer': {'countdown': "‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {time}", 'final': "‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ç–µ–∫–ª–æ"},
            'gentle': {'countdown': "üí≠ –í—Ä–µ–º—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏: {time}", 'final': "üí≠ –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏—Å—Ç–µ–∫–ª–æ"},
            'generic': {'countdown': "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time}", 'final': "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"}
        }

    def format_countdown_time(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è countdown –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds <= 0:
            return "–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        secs = seconds % 60
        parts = []
        if hours > 0:
            form = "—á–∞—Å" if hours == 1 else ("—á–∞—Å–∞" if 2 <= hours <= 4 else "—á–∞—Å–æ–≤")
            parts.append(f"{hours} {form}")
        if minutes > 0:
            form = "–º–∏–Ω—É—Ç—É" if minutes == 1 else ("–º–∏–Ω—É—Ç—ã" if 2 <= minutes <= 4 else "–º–∏–Ω—É—Ç")
            parts.append(f"{minutes} {form}")
        if secs > 0 or not parts:
            form = "—Å–µ–∫—É–Ω–¥—É" if secs == 1 else ("—Å–µ–∫—É–Ω–¥—ã" if 2 <= secs <= 4 else "—Å–µ–∫—É–Ω–¥")
            parts.append(f"{secs} {form}")
        return " ".join(parts)

    def get_countdown_message_type(self, duration: int, node_id: str = "", node_text: str = "") -> str:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        if duration <= 5:
            base_type = "urgent"
        elif duration <= 15:
            base_type = "choice"
        elif duration <= 60:
            base_type = "decision"
        else:
            base_type = "gentle"
        if node_id:
            node_lower = node_id.lower()
            if any(keyword in node_lower for keyword in ['test', 'quiz', 'question', 'answer']):
                return "answer"
            elif any(keyword in node_lower for keyword in ['timing', 'speed', 'reaction']):
                return "choice"
        if node_text:
            text_lower = node_text.lower()
            if any(word in text_lower for word in ['–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—á—É–≤—Å—Ç–≤–æ', '–æ—â—É—â–µ–Ω–∏–µ']):
                return "gentle"
            elif any(word in text_lower for word in ['–±—ã—Å—Ç—Ä–æ', '—Å—Ä–æ—á–Ω–æ', '—Å–∫–æ—Ä–µ–µ']):
                return "urgent"
            elif any(word in text_lower for word in ['—Ç–µ—Å—Ç', '–≤–æ–ø—Ä–æ—Å', '–æ—Ç–≤–µ—Ç']):
                return "answer"
        return base_type

    def should_show_countdown(self, context: dict) -> bool:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –≤–µ—Ä—Å–∏—è: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç Silent Mode vs Interactive Mode"""
        print(f"üîç [DIAG] should_show_countdown() called")

        pause_text = context.get('pause_text', '').strip()
        has_pause_text = bool(pause_text)

        buttons = context.get('buttons', [])
        has_buttons = len(buttons) > 0

        print(f"üîç [DIAG] Silent mode analysis:")
        print(f"   - pause_text: '{pause_text[:50]}{'...' if len(pause_text) > 50 else ''}'")
        print(f"   - buttons: {buttons}")
        print(f"   - has_buttons: {has_buttons}")
        print(f"   - has_pause_text: {has_pause_text}")

        show_countdown = has_buttons and not has_pause_text
        mode = "INTERACTIVE" if show_countdown else "SILENT"
        print(f"‚úÖ [DIAG] Determined timeout mode: {mode}")

        return show_countdown

    # === –ë–î –û–ü–ï–†–ê–¶–ò–ò –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô ===

    def _get_db_session(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è DB session"""
        print("üîÑ [DIAG] _get_db_session() called")
        try:
            print("üîÑ [DIAG] Creating SessionLocal()...")
            session = SessionLocal()
            print(f"‚úÖ [DIAG] DB session created successfully: {session}")
            return session
        except Exception as e:
            print(f"‚ùå [DIAG] Failed to create DB session: {e}")
            print(f"‚ùå [DIAG] Exception type: {type(e)}")
            logger.error(f"Failed to create DB session: {e}")
            return None

    def save_timer_to_db(self, session_id: int, timer_type: str, 
                         delay_seconds: int, message_text: str = "",
                         callback_node_id: str = "", callback_data: dict = None):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –≤ –ë–î"""
        print(f"üîÑ [DIAG] save_timer_to_db() called:")
        print(f"   - session_id: {session_id}")
        print(f"   - timer_type: {timer_type}")
        print(f"   - delay_seconds: {delay_seconds}")
        print(f"   - message_text: '{message_text}'")
        print(f"   - callback_node_id: '{callback_node_id}'")
        print(f"   - callback_data: {callback_data}")

        if callback_data is None:
            callback_data = {}
            print("üîÑ [DIAG] callback_data was None, set to empty dict")

        db = self._get_db_session()
        if not db:
            print("‚ùå [DIAG] DB session is None - returning None (PATH 1)")
            return None

        try:
            print("üîÑ [DIAG] Calculating target_time...")
            target_time = utc_now() + timedelta(seconds=delay_seconds)
            print(f"‚úÖ [DIAG] target_time calculated: {target_time}")

            print("üîÑ [DIAG] Creating ActiveTimer object...")
            timer_record = ActiveTimer(
                session_id=session_id,
                timer_type=timer_type,
                target_timestamp=target_time,
                message_text=message_text,
                callback_node_id=callback_node_id,
                callback_data=callback_data,
                status='pending'
            )
            print(f"‚úÖ [DIAG] ActiveTimer object created: ID will be assigned after commit")

            print("üîÑ [DIAG] Adding ActiveTimer to database session...")
            db.add(timer_record)
            print("‚úÖ [DIAG] ActiveTimer added to session")

            print("üîÑ [DIAG] Committing transaction to database...")
            db.commit()
            print("‚úÖ [DIAG] Transaction committed successfully")

            timer_id = timer_record.id
            print(f"‚úÖ [DIAG] Timer saved successfully with ID: {timer_id}")
            return timer_id

        except Exception as e:
            print(f"‚ùå [DIAG] Exception in save_timer_to_db: {e}")
            print(f"‚ùå [DIAG] Exception type: {type(e)}")
            print(f"‚ùå [DIAG] Exception args: {e.args}")
            logger.error(f"Failed to save timer to DB: {e}")
            try:
                print("üîÑ [DIAG] Rolling back transaction...")
                db.rollback()
                print("‚úÖ [DIAG] Transaction rolled back")
            except Exception as rollback_e:
                print(f"‚ùå [DIAG] Rollback failed: {rollback_e}")
            return None
        finally:
            try:
                print("üîÑ [DIAG] Closing DB connection...")
                db.close()
                print("‚úÖ [DIAG] DB connection closed")
            except Exception as close_e:
                print(f"‚ùå [DIAG] DB close failed: {close_e}")

    def cleanup_expired_timers(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –≤–µ—Ä—Å–∏—è –æ—á–∏—Å—Ç–∫–∏ expired —Ç–∞–π–º–µ—Ä–æ–≤"""
        print("üîÑ [DIAG] cleanup_expired_timers() called")

        db = self._get_db_session()
        if not db:
            print("‚ùå [DIAG] No DB session for cleanup")
            return

        try:
            print("üîÑ [DIAG] Importing sqlalchemy functions...")
            from sqlalchemy import and_
            print("‚úÖ [DIAG] sqlalchemy imported successfully")

            current_time = utc_now()
            print(f"üîÑ [DIAG] Current UTC time for cleanup: {current_time}")

            print("üîÑ [DIAG] Building cleanup query...")
            query = db.query(ActiveTimer).filter(
                and_(ActiveTimer.status == 'pending', ActiveTimer.target_timestamp < current_time)
            )
            print("‚úÖ [DIAG] Cleanup query built")

            print("üîÑ [DIAG] Executing UPDATE active_timers SET status='expired'...")
            expired_count = query.update({'status': 'expired'})
            print(f"‚úÖ [DIAG] UPDATE executed, {expired_count} timers affected")

            print("üîÑ [DIAG] Committing cleanup transaction...")
            db.commit()
            print("‚úÖ [DIAG] Cleanup transaction committed")

            if expired_count > 0:
                print(f"‚úÖ [DIAG] Successfully cleaned up {expired_count} expired timers")
            else:
                print("‚ÑπÔ∏è [DIAG] No expired timers found")

        except Exception as e:
            print(f"‚ùå [DIAG] Exception in cleanup_expired_timers: {e}")
            print(f"‚ùå [DIAG] Exception type: {type(e)}")
            logger.error(f"Failed to cleanup expired timers: {e}")
            try:
                print("üîÑ [DIAG] Rolling back cleanup transaction...")
                db.rollback()
                print("‚úÖ [DIAG] Cleanup transaction rolled back")
            except Exception as rollback_e:
                print(f"‚ùå [DIAG] Cleanup rollback failed: {rollback_e}")
        finally:
            try:
                print("üîÑ [DIAG] Closing cleanup DB connection...")
                db.close()
                print("‚úÖ [DIAG] Cleanup DB connection closed")
            except Exception as close_e:
                print(f"‚ùå [DIAG] Cleanup DB close failed: {close_e}")

    def restore_timers_from_db(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –∑–∞–≥–ª—É—à–∫–∞ restore —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("‚úÖ [DIAG] restore_timers_from_db() - –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–ë–î –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã)")

    def _init_presets(self) -> Dict[str, Dict[str, Any]]:
        return {
            'clean': {'exposure_time': 1.5, 'anti_flicker_delay': 1.0, 'action': 'delete'},
            'keep': {'exposure_time': 0, 'anti_flicker_delay': 0.5, 'action': 'keep'},
            'fast': {'exposure_time': 0.8, 'anti_flicker_delay': 0.5, 'action': 'delete'},
            'slow': {'exposure_time': 3.0, 'anti_flicker_delay': 2.0, 'action': 'delete'},
            'instant': {'exposure_time': 0, 'anti_flicker_delay': 0, 'action': 'delete'}
        }

    def _init_parsers(self) -> Dict[str, Any]:
        return {
            'basic_pause': self._parse_basic_pause,
            'typing': self._parse_typing,
            'process': self._parse_process,
            'timeout': self._parse_timeout,
            'daily': self._parse_daily
        }

    def _init_executors(self) -> Dict[str, Any]:
        return {
            'pause': self._execute_pause,
            'typing': self._execute_typing,
            'process': self._execute_process,
            'timeout': self._execute_timeout,
            'daily': self._execute_daily
        }

    def execute_timing(self, timing_config: str, callback: Callable, **context) -> None:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –≤–µ—Ä—Å–∏—è execute_timing"""
        print(f"üîÑ [DIAG] execute_timing() called:")
        print(f"   - timing_config: '{timing_config}'")
        print(f"   - context keys: {list(context.keys())}")

        if not self.enabled:
            print("‚ö†Ô∏è [DIAG] Timing disabled, calling callback immediately")
            callback()
            return

        try:
            print("üîÑ [DIAG] Parsing timing DSL...")
            commands = self._parse_timing_dsl(timing_config)
            print(f"‚úÖ [DIAG] Parsed {len(commands)} commands: {commands}")

            print("üîÑ [DIAG] Executing timing commands...")
            self._execute_timing_commands(commands, callback, **context)
        except Exception as e:
            print(f"‚ùå [DIAG] TimingEngine error: {e}")
            logger.error(f"TimingEngine error: {e}")
            callback()

    def _parse_timing_dsl(self, timing_config: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–µ—Ä DSL –∫–æ–º–∞–Ω–¥"""
        if not timing_config or timing_config.strip() == "":
            return []

        command_strings = [cmd.strip() for cmd in timing_config.split(';') if cmd.strip()]
        commands = []

        for cmd_str in command_strings:
            parsed = None
            print(f"üîÑ [DIAG] Parsing command: '{cmd_str}'")

            if re.match(r'^\d+(\.\d+)?(s)?$', cmd_str):
                parsed = self._parse_basic_pause(cmd_str)
            elif cmd_str.startswith('process:'):
                parsed = self._parse_process(cmd_str)
            elif cmd_str.startswith('timeout:'):
                parsed = self._parse_timeout(cmd_str)
            elif cmd_str.startswith('typing:'):
                parsed = self._parse_typing(cmd_str)
            elif cmd_str.startswith('daily@'):
                parsed = self._parse_daily(cmd_str)

            if parsed:
                print(f"‚úÖ [DIAG] Successfully parsed: {parsed['type']}")
                commands.append(parsed)
            else:
                print(f"‚ùå [DIAG] Failed to parse command: {cmd_str}")
                logger.warning(f"Unknown timing command: {cmd_str}")

        return commands

    def _execute_timing_commands(self, commands: List[Dict[str, Any]], 
                                 callback: Callable, **context) -> None:
        """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥"""
        if not commands:
            print("‚ö†Ô∏è [DIAG] No commands to execute, calling callback")
            callback()
            return

        for command in commands:
            cmd_type = command.get('type')
            print(f"üîÑ [DIAG] Executing command type: '{cmd_type}'")
            if cmd_type in self.executors:
                try:
                    self.executors[cmd_type](command, callback, **context)
                    print(f"‚úÖ [DIAG] Command '{cmd_type}' executed")
                except Exception as e:
                    print(f"‚ùå [DIAG] Error executing '{cmd_type}': {e}")
                    logger.error(f"Error executing {cmd_type}: {e}")
            else:
                print(f"‚ùå [DIAG] No executor for command type: {cmd_type}")
                logger.warning(f"No executor for command type: {cmd_type}")

    # === –ü–ê–†–°–ï–†–´ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ) ===
    def _parse_timeout(self, cmd_str: str) -> Dict[str, Any]:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ø–∞—Ä—Å–µ—Ä timeout"""
        print(f"üîÑ [DIAG] Parsing timeout: '{cmd_str}'")
        match = re.match(r'^timeout:(\d+(?:\.\d+)?)s(?::(.+))?$', cmd_str)
        if match:
            duration = float(match.group(1))
            target = match.group(2) if match.group(2) else None
            result = {
                'type': 'timeout',
                'duration': duration,
                'target_node': target,
                'use_next_node_id': target is None,
                'preset': 'clean',
                'show_countdown': True,
                'original': cmd_str
            }
            print(f"‚úÖ [DIAG] Timeout parsed successfully: duration={duration}, target='{target}'")
            return result
        print(f"‚ùå [DIAG] Failed to parse timeout command")
        return None

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
    def _parse_basic_pause(self, cmd_str: str): 
        print(f"‚ÑπÔ∏è [DIAG] basic_pause parser - stub"); return None
    def _parse_typing(self, cmd_str: str): 
        print(f"‚ÑπÔ∏è [DIAG] typing parser - stub"); return None
    def _parse_process(self, cmd_str: str): 
        print(f"‚ÑπÔ∏è [DIAG] process parser - stub"); return None
    def _parse_daily(self, cmd_str: str): 
        print(f"‚ÑπÔ∏è [DIAG] daily parser - stub"); return None

    # === –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò ===
    def _execute_timeout(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –≤–µ—Ä—Å–∏—è timeout –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        print(f"üîÑ [DIAG] _execute_timeout() called:")
        print(f"   - command: {command}")
        print(f"   - context keys: {list(context.keys())}")

        duration = int(command['duration'])
        session_id = context.get('session_id')
        bot = context.get('bot')
        chat_id = context.get('chat_id')

        print(f"‚úÖ [DIAG] Timeout parameters extracted:")
        print(f"   - duration: {duration}s")
        print(f"   - session_id: {session_id}")
        print(f"   - bot: {bot}")
        print(f"   - chat_id: {chat_id}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º timeout
        print("üîÑ [DIAG] Determining timeout mode...")
        show_countdown = self.should_show_countdown(context)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if session_id:
            print("üîÑ [DIAG] Attempting to save timeout to database...")
            timer_id = self.save_timer_to_db(
                session_id=session_id,
                timer_type='timeout',
                delay_seconds=duration,
                message_text=f"Timeout {duration}s ({'interactive' if show_countdown else 'silent'})",
                callback_node_id="",
                callback_data={'command': command, 'show_countdown': show_countdown}
            )
            print(f"‚úÖ [DIAG] Timeout save result: timer_id={timer_id}")
        else:
            print("‚ö†Ô∏è [DIAG] No session_id provided, skipping database save")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
        def timeout_callback():
            print(f"‚è∞ [DIAG] Timeout {duration}s triggered for session {session_id}")
            try:
                callback()
                print("‚úÖ [DIAG] Timeout callback executed successfully")
            except Exception as e:
                print(f"‚ùå [DIAG] Timeout callback failed: {e}")

        print(f"üîÑ [DIAG] Starting {duration}s timer...")
        timer = threading.Timer(duration, timeout_callback)
        timer.start()
        print(f"‚úÖ [DIAG] Timer started successfully")

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    def _execute_pause(self, command, callback, **context): 
        print(f"‚ÑπÔ∏è [DIAG] pause executor - stub"); callback()
    def _execute_typing(self, command, callback, **context): 
        print(f"‚ÑπÔ∏è [DIAG] typing executor - stub"); callback()
    def _execute_process(self, command, callback, **context): 
        print(f"‚ÑπÔ∏è [DIAG] process executor - stub"); callback()
    def _execute_daily(self, command, callback, **context): 
        print(f"‚ÑπÔ∏è [DIAG] daily executor - stub"); callback()

    def process_timing(self, user_id: int, session_id: int, node_id: str, 
                       timing_config: str, callback: Callable, **context) -> None:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –≤–µ—Ä—Å–∏—è process_timing"""
        print(f"üîÑ [DIAG] process_timing() called:")
        print(f"   - user_id: {user_id}")
        print(f"   - session_id: {session_id}")  
        print(f"   - node_id: '{node_id}'")
        print(f"   - timing_config: '{timing_config}'")

        if not self.enabled:
            print("‚ö†Ô∏è [DIAG] Timing system disabled")
            callback()
            return

        try:
            enriched_context = dict(context)
            enriched_context['session_id'] = session_id
            enriched_context['node_id'] = node_id
            print(f"‚úÖ [DIAG] Enriched context keys: {list(enriched_context.keys())}")

            self.execute_timing(timing_config, callback, **enriched_context)
        except Exception as e:
            print(f"‚ùå [DIAG] process_timing error: {e}")
            logger.error(f"process_timing error: {e}")
            callback()

    def get_status(self) -> Dict[str, Any]:
        return {
            'enabled': self.enabled,
            'active_timers': len(self.active_timers),
            'diagnostic_mode': True
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
print("üöÄ [DIAG] Creating global TimingEngine instance...")
timing_engine = TimingEngine()
print("‚úÖ [DIAG] Global TimingEngine instance created")

# –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def process_node_timing(user_id: int, session_id: int, node_id: str, 
                        timing_config: str, callback: Callable, **context) -> None:
    print(f"üîÑ [DIAG] PUBLIC process_node_timing() called:")
    print(f"   - user_id={user_id}, session_id={session_id}")
    print(f"   - node_id='{node_id}', timing_config='{timing_config}'")
    print(f"   - context keys: {list(context.keys())}")

    result = timing_engine.process_timing(user_id, session_id, node_id, timing_config, callback, **context)
    print(f"‚úÖ [DIAG] PUBLIC process_node_timing() completed")
    return result

def cancel_timeout_for_session(session_id: int) -> bool:
    print(f"üîÑ [DIAG] cancel_timeout_for_session({session_id}) called")
    return True  # –ó–∞–≥–ª—É—à–∫–∞

def get_timing_status() -> Dict[str, Any]:
    status = timing_engine.get_status()
    print(f"‚ÑπÔ∏è [DIAG] get_timing_status() called, returning: {status}")
    return status