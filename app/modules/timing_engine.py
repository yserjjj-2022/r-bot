# -*- coding: utf-8 -*-
"""
R-Bot Timing Engine - —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ countdown —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ Silent Mode

–û–ë–ù–û–í–õ–ï–ù–ò–Ø:
06.10.2025 - –î–û–ë–ê–í–õ–ï–ù–´ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ countdown —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤)
06.10.2025 - –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ —Ä–∞–∑—Ä—è–¥—ã) 
06.10.2025 - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
06.10.2025 - –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ timeout
06.10.2025 - –î–û–ë–ê–í–õ–ï–ù Silent Mode –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–Ω—ã—Ö timeout'–æ–≤
06.10.2025 - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è daily/remind/deadline (–¥–ª—è –±—É–¥—É—â–∏—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤)

DSL –∫–æ–º–∞–Ω–¥—ã:
- timeout:15s:no_answer - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π timeout —Å countdown (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏)
- timeout:5s:slow - —Ç–∏—Ö–∏–π timeout –¥–ª—è –¥—Ä–∞–º–∞—Ç—É—Ä–≥–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å pause_text)  
- typing:5s:–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è:clean - –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä 5s —Å preset clean
- daily@09:00MSK - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
- remind:5m,1h,1d - —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)  
- deadline:2h - –¥–µ–¥–ª–∞–π–Ω—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
"""

import threading
import time
import re
import logging
from datetime import timedelta
from typing import Dict, Any, Callable, Optional, List, Set

from app.modules.database.models import ActiveTimer, utc_now
from app.modules.database import SessionLocal

TIMING_ENABLED = True
logger = logging.getLogger(__name__)

class TimingEngine:
    """
    Timing Engine —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ countdown —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, Silent Mode 
    –∏ –≥–æ—Ç–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    """

    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if hasattr(self, 'initialized'):
            return

        self.enabled = TIMING_ENABLED
        self.active_timers: Dict[str, threading.Timer] = {}
        self.parsers = self._init_parsers()
        self.executors = self._init_executors()
        self.presets = self._init_presets()

        # –î–ª—è timeout –∑–∞–¥–∞—á
        self.cancelled_tasks: Set[int] = set()         
        self.active_timeouts: Dict[int, threading.Thread] = {}  
        self.debug_timers: Dict[int, Dict] = {}  

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã countdown —Å–æ–æ–±—â–µ–Ω–∏–π
        self.countdown_templates = self._init_countdown_templates()

        self.initialized = True

        logger.info(f"TimingEngine initialized with Silent Mode. Enabled: {self.enabled}")
        print(f"[TIMING-ENGINE] TimingEngine initialized with enabled={self.enabled}")
        print(f"[TIMING-ENGINE] Available presets: {list(self.presets.keys())}")
        print(f"[TIMING-ENGINE] Available commands: {list(self.parsers.keys())}")
        print(f"[TIMING-ENGINE] Adaptive message types: {list(self.countdown_templates.keys())}")
        print(f"[TIMING-ENGINE] Silent Mode activated for scenic timeouts")

        if self.enabled:
            try:
                self.restore_timers_from_db()
                self.cleanup_expired_timers()
            except Exception as e:
                logger.error(f"Failed to restore/cleanup timers on init: {e}")

    def _init_countdown_templates(self) -> Dict[str, Dict[str, str]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ countdown —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {
            'urgent': {
                'countdown': "üö® –í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å: {time}",
                'final': "üö® –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!"
            },
            'choice': {
                'countdown': "‚è≥ –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑: {time}",
                'final': "‚è∞ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ"
            },
            'decision': {
                'countdown': "‚è≥ –ù–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å: {time}",
                'final': "‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ"
            },
            'answer': {
                'countdown': "‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {time}",
                'final': "‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ç–µ–∫–ª–æ"
            },
            'gentle': {
                'countdown': "üí≠ –í—Ä–µ–º—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏: {time}",
                'final': "üí≠ –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏—Å—Ç–µ–∫–ª–æ"
            },
            'generic': {
                'countdown': "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time}",
                'final': "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"
            }
        }

    def format_countdown_time(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è countdown –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds <= 0:
            return "–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"

        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        secs = seconds % 60

        parts = []
        if hours > 0:
            form = "—á–∞—Å" if hours == 1 else ("—á–∞—Å–∞" if 2 <= hours <= 4 else "—á–∞—Å–æ–≤")
            parts.append(f"{hours} {form}")
        if minutes > 0:
            form = "–º–∏–Ω—É—Ç—É" if minutes == 1 else ("–º–∏–Ω—É—Ç—ã" if 2 <= minutes <= 4 else "–º–∏–Ω—É—Ç")
            parts.append(f"{minutes} {form}")
        if secs > 0 or not parts:
            form = "—Å–µ–∫—É–Ω–¥—É" if secs == 1 else ("—Å–µ–∫—É–Ω–¥—ã" if 2 <= secs <= 4 else "—Å–µ–∫—É–Ω–¥")
            parts.append(f"{secs} {form}")

        return " ".join(parts)

    def get_countdown_message_type(self, duration: int, node_id: str = "", node_text: str = "") -> str:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""

        # –ü—Ä–∞–≤–∏–ª–æ 1: –ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        if duration <= 5:
            base_type = "urgent"
        elif duration <= 15:
            base_type = "choice"
        elif duration <= 60:
            base_type = "decision"
        else:
            base_type = "gentle"

        # –ü—Ä–∞–≤–∏–ª–æ 2: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ node_id
        if node_id:
            node_lower = node_id.lower()
            if any(keyword in node_lower for keyword in ['test', 'quiz', 'question', 'answer']):
                return "answer"
            elif any(keyword in node_lower for keyword in ['timing', 'speed', 'reaction']):
                return "choice"

        # –ü—Ä–∞–≤–∏–ª–æ 3: –ü–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞
        if node_text:
            text_lower = node_text.lower()
            if any(word in text_lower for word in ['–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—á—É–≤—Å—Ç–≤–æ', '–æ—â—É—â–µ–Ω–∏–µ']):
                return "gentle"
            elif any(word in text_lower for word in ['–±—ã—Å—Ç—Ä–æ', '—Å—Ä–æ—á–Ω–æ', '—Å–∫–æ—Ä–µ–µ']):
                return "urgent"
            elif any(word in text_lower for word in ['—Ç–µ—Å—Ç', '–≤–æ–ø—Ä–æ—Å', '–æ—Ç–≤–µ—Ç']):
                return "answer"

        return base_type

    def should_show_countdown(self, context: dict) -> bool:
        """
        –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å countdown —Å–æ–æ–±—â–µ–Ω–∏—è

        –õ–û–ì–ò–ö–ê:
        - –ï—Å—Ç—å pause_text ‚Üí –¢–ò–•–ò–ô timeout (—Å—Ü–µ–Ω–∞—Ä–Ω–∞—è –ø–∞—É–∑–∞) 
        - –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ò –Ω–µ—Ç pause_text ‚Üí –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô timeout (countdown)
        - –ù–ï–¢ –∫–Ω–æ–ø–æ–∫ –ò –ù–ï–¢ pause_text ‚Üí –¢–ò–•–ò–ô timeout
        """
        pause_text = context.get('pause_text', '').strip()
        has_pause_text = bool(pause_text)

        has_buttons = len(context.get('buttons', [])) > 0

        print(f"[TIMING-ENGINE] Silent mode check:")
        print(f"  - pause_text: '{pause_text[:30]}{'...' if len(pause_text) > 30 else ''}'")
        print(f"  - has_buttons: {has_buttons}")

        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å countdown —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö timeout'–æ–≤
        show_countdown = has_buttons and not has_pause_text
        mode = "INTERACTIVE" if show_countdown else "SILENT"
        print(f"[TIMING-ENGINE] Timeout mode: {mode}")

        return show_countdown

    def _init_presets(self) -> Dict[str, Dict[str, Any]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è preset'–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ –∏ anti-flicker"""
        return {
            'clean': {
                'exposure_time': 1.5,
                'anti_flicker_delay': 1.0,
                'action': 'delete',
                'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç: –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1.5—Å, –ø–∞—É–∑–∞ 1—Å, —É–¥–∞–ª–∏—Ç—å'
            },
            'keep': {
                'exposure_time': 0,
                'anti_flicker_delay': 0.5,
                'action': 'keep',
                'description': '–û—Å—Ç–∞–≤–∏—Ç—å –≤ –ª–µ–Ω—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞'
            },
            'fast': {
                'exposure_time': 0.8,
                'anti_flicker_delay': 0.5,
                'action': 'delete',
                'description': '–ë—ã—Å—Ç—Ä–æ: –ø–æ–∫–∞–∑–∞—Ç—å 0.8—Å, –ø–∞—É–∑–∞ 0.5—Å, —É–¥–∞–ª–∏—Ç—å'
            },
            'slow': {
                'exposure_time': 3.0,
                'anti_flicker_delay': 2.0,
                'action': 'delete',
                'description': '–ú–µ–¥–ª–µ–Ω–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å 3—Å, –ø–∞—É–∑–∞ 2—Å, —É–¥–∞–ª–∏—Ç—å'
            },
            'instant': {
                'exposure_time': 0,
                'anti_flicker_delay': 0,
                'action': 'delete',
                'description': '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ: —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å'
            }
        }

    @classmethod
    def get_instance(cls):
        return cls()

    # === DB helpers ===
    def _get_db_session(self):
        try:
            return SessionLocal()
        except Exception as e:
            logger.error(f"Failed to create DB session: {e}")
            return None

    def save_timer_to_db(self, session_id: int, timer_type: str, 
                         delay_seconds: int, message_text: str = "",
                         callback_node_id: str = "", callback_data: dict = None):
        if callback_data is None:
            callback_data = {}
        db = self._get_db_session()
        if not db:
            return None
        try:
            target_time = utc_now() + timedelta(seconds=delay_seconds)
            timer_record = ActiveTimer(
                session_id=session_id,
                timer_type=timer_type,
                target_timestamp=target_time,
                message_text=message_text,
                callback_node_id=callback_node_id,
                callback_data=callback_data,
                status='pending'
            )
            db.add(timer_record)
            db.commit()
            return timer_record.id
        except Exception as e:
            logger.error(f"Failed to save timer to DB: {e}")
            db.rollback()
            return None
        finally:
            db.close()

    def restore_timers_from_db(self):
        db = self._get_db_session()
        if not db:
            return
        try:
            pending_timers = db.query(ActiveTimer).filter(
                ActiveTimer.status == 'pending',
                ActiveTimer.target_timestamp > utc_now()
            ).all()

            for timer_record in pending_timers:
                remaining = (timer_record.target_timestamp - utc_now()).total_seconds()
                if remaining > 0:
                    timer_key = f"db_{timer_record.id}"
                    def create_callback(tid=timer_record.id):
                        return lambda: self._execute_db_timer(tid)

                    thread_timer = threading.Timer(remaining, create_callback())
                    thread_timer.start()
                    self.active_timers[timer_key] = thread_timer
        except Exception as e:
            logger.error(f"Failed to restore timers: {e}")
        finally:
            db.close()

    def _execute_db_timer(self, timer_id: int):
        db = self._get_db_session()
        if not db:
            return
        try:
            timer_record = db.query(ActiveTimer).filter(ActiveTimer.id == timer_id).first()
            if not timer_record:
                return
            timer_record.status = 'executed'
            db.commit()

            timer_key = f"db_{timer_id}"
            if timer_key in self.active_timers:
                del self.active_timers[timer_key]
        except Exception as e:
            logger.error(f"Failed to execute DB timer {timer_id}: {e}")
            db.rollback()
        finally:
            db.close()

    def cleanup_expired_timers(self):
        db = self._get_db_session()
        if not db:
            return
        try:
            from sqlalchemy import and_
            expired_count = db.query(ActiveTimer).filter(
                and_(ActiveTimer.status == 'pending', ActiveTimer.target_timestamp < utc_now())
            ).update({'status': 'expired'})
            db.commit()
        except Exception as e:
            logger.error(f"Failed to cleanup expired timers: {e}")
            db.rollback()
        finally:
            db.close()

    # === –ü–∞—Ä—Å–µ—Ä—ã –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ ===
    def _init_parsers(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤ DSL –∫–æ–º–∞–Ω–¥"""
        return {
            'basic_pause': self._parse_basic_pause,
            'typing': self._parse_typing,
            'process': self._parse_process,
            'timeout': self._parse_timeout,  # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø timeout –∫–æ–º–∞–Ω–¥–∞
            'daily': self._parse_daily,      # –ó–ê–ì–û–¢–û–í–ö–ê: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            'remind': self._parse_remind,    # –ó–ê–ì–û–¢–û–í–ö–ê: —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            'deadline': self._parse_deadline # –ó–ê–ì–û–¢–û–í–ö–ê: –¥–µ–¥–ª–∞–π–Ω—ã
        }

    def _init_executors(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥"""
        return {
            'pause': self._execute_pause,
            'typing': self._execute_typing,
            'process': self._execute_process,
            'timeout': self._execute_timeout,  # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô timeout –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            'daily': self._execute_daily,      # –ó–ê–ì–û–¢–û–í–ö–ê: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å daily
            'remind': self._execute_remind,    # –ó–ê–ì–û–¢–û–í–ö–ê: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å remind
            'deadline': self._execute_deadline # –ó–ê–ì–û–¢–û–í–ö–ê: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å deadline
        }

    def execute_timing(self, timing_config: str, callback: Callable, **context) -> None:
        if not self.enabled:
            callback()
            return
        try:
            commands = self._parse_timing_dsl(timing_config)
            self._execute_timing_commands(commands, callback, **context)
        except Exception as e:
            logger.error(f"TimingEngine error: {e}")
            callback()

    def _parse_timing_dsl(self, timing_config: str) -> List[Dict[str, Any]]:
        if not timing_config or timing_config.strip() == "":
            return []

        command_strings = [cmd.strip() for cmd in timing_config.split(';') if cmd.strip()]
        commands = []

        for cmd_str in command_strings:
            parsed = None

            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
            if re.match(r'^\d+(\.\d+)?(s)?$', cmd_str):
                parsed = self.parsers['basic_pause'](cmd_str)
            # process –∫–æ–º–∞–Ω–¥—ã
            elif cmd_str.startswith('process:'):
                parsed = self.parsers['process'](cmd_str)
            # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø timeout –∫–æ–º–∞–Ω–¥–∞  
            elif cmd_str.startswith('timeout:'):
                parsed = self.parsers['timeout'](cmd_str)
            # typing –∫–æ–º–∞–Ω–¥—ã —Å preset'–∞–º–∏
            elif cmd_str.startswith('typing:'):
                parsed = self.parsers['typing'](cmd_str)
            # –ó–ê–ì–û–¢–û–í–ö–ò –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            elif cmd_str.startswith('daily@'):
                parsed = self.parsers['daily'](cmd_str)
            elif cmd_str.startswith('remind:'):
                parsed = self.parsers['remind'](cmd_str)
            elif cmd_str.startswith('deadline:'):
                parsed = self.parsers['deadline'](cmd_str)

            if parsed:
                commands.append(parsed)
            else:
                logger.warning(f"Unknown timing command: {cmd_str}")

        return commands

    def _execute_timing_commands(self, commands: List[Dict[str, Any]], 
                                 callback: Callable, **context) -> None:
        if not commands:
            callback()
            return

        for command in commands:
            cmd_type = command.get('type')
            if cmd_type in self.executors:
                try:
                    self.executors[cmd_type](command, callback, **context)
                except Exception as e:
                    logger.error(f"Error executing {cmd_type}: {e}")
            else:
                logger.warning(f"No executor for command type: {cmd_type}")

    # === DSL –ø–∞—Ä—Å–µ—Ä—ã ===
    def _parse_basic_pause(self, cmd_str: str) -> Dict[str, Any]:
        match = re.match(r'^\d+(\.\d+)?(s)?$', cmd_str)
        if match:
            duration = float(cmd_str.replace('s', ''))
            return {'type': 'pause', 'duration': duration, 'process_name': '–ü–∞—É–∑–∞', 'original': cmd_str}
        return None

    def _parse_typing(self, cmd_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ typing –∫–æ–º–∞–Ω–¥ —Å preset'–∞–º–∏"""
        pattern = r'^typing:(\d+(?:\.\d+)?)s?(?::([^:]+))?(?::([^:]+))?$'
        match = re.match(pattern, cmd_str)
        if match:
            duration = float(match.group(1))
            process_name = match.group(2) if match.group(2) else "–û–±—Ä–∞–±–æ—Ç–∫–∞"
            preset = match.group(3) if match.group(3) else 'clean'

            preset_config = self.presets.get(preset, self.presets['clean'])

            return {
                'type': 'typing',
                'duration': duration,
                'process_name': process_name,
                'preset': preset,
                'exposure_time': preset_config['exposure_time'],
                'anti_flicker_delay': preset_config['anti_flicker_delay'],
                'action': preset_config['action'],
                'show_progress': True,
                'original': cmd_str
            }
        return None

    def _parse_process(self, cmd_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ process –∫–æ–º–∞–Ω–¥ (–∑–∞–º–µ–Ω–∞ state: true)"""
        pattern = r'^process:(\d+(?:\.\d+)?)s?:([^:]+)(?::([^:]+))?$'
        match = re.match(pattern, cmd_str)
        if match:
            duration = float(match.group(1))
            process_name = match.group(2)
            preset = match.group(3) if match.group(3) else 'clean'

            preset_config = self.presets.get(preset, self.presets['clean'])

            return {
                'type': 'process',
                'duration': duration,
                'process_name': process_name,
                'preset': preset,
                'exposure_time': preset_config['exposure_time'],
                'anti_flicker_delay': preset_config['anti_flicker_delay'],
                'action': preset_config['action'],
                'show_progress': False,
                'original': cmd_str
            }
        return None

    def _parse_timeout(self, cmd_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ timeout –∫–æ–º–∞–Ω–¥—ã —Å —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ–º preset'–æ–≤ –∏ —É–∑–ª–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        known_presets = set(self.presets.keys())

        # –§–æ—Ä–º–∞—Ç—ã timeout –∫–æ–º–∞–Ω–¥
        pattern_with_arg = r'^timeout:(\d+(?:\.\d+)?)s:([^:]+)$'
        pattern_simple = r'^timeout:(\d+(?:\.\d+)?)s$'

        # timeout:15s:xxx
        match_with_arg = re.match(pattern_with_arg, cmd_str)
        if match_with_arg:
            duration = float(match_with_arg.group(1))
            arg = match_with_arg.group(2).strip()

            if arg in known_presets:
                # Preset - –∏—Å–ø–æ–ª—å–∑—É–µ–º next_node_id
                return {
                    'type': 'timeout',
                    'duration': duration,
                    'target_node': None,
                    'use_next_node_id': True,
                    'preset': arg,
                    'show_countdown': True,
                    'original': cmd_str
                }
            else:
                # –£–∑–µ–ª - —è–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
                return {
                    'type': 'timeout',
                    'duration': duration,
                    'target_node': arg,
                    'use_next_node_id': False,
                    'preset': 'clean',
                    'show_countdown': True,
                    'original': cmd_str
                }

        # timeout:30s
        match_simple = re.match(pattern_simple, cmd_str)
        if match_simple:
            duration = float(match_simple.group(1))
            return {
                'type': 'timeout',
                'duration': duration,
                'target_node': None,
                'use_next_node_id': True,
                'preset': 'clean',
                'show_countdown': True,
                'original': cmd_str
            }

        return None

    # –ó–ê–ì–û–¢–û–í–ö–ò –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    def _parse_daily(self, cmd_str: str) -> Dict[str, Any]:
        """–ó–ê–ì–û–¢–û–í–ö–ê: –ü–∞—Ä—Å–∏–Ω–≥ daily –∫–æ–º–∞–Ω–¥ - daily@09:00MSK"""
        match = re.match(r'^daily@(\d{2}):(\d{2})([A-Z]{3})?$', cmd_str)
        if match:
            return {
                'type': 'daily', 
                'hour': int(match.group(1)), 
                'minute': int(match.group(2)), 
                'timezone': match.group(3) or 'UTC', 
                'original': cmd_str
            }
        return None

    def _parse_remind(self, cmd_str: str) -> Dict[str, Any]:
        """–ó–ê–ì–û–¢–û–í–ö–ê: –ü–∞—Ä—Å–∏–Ω–≥ remind –∫–æ–º–∞–Ω–¥ - remind:5m,1h,1d"""
        match = re.match(r'^remind:(.+)$', cmd_str)
        if match:
            intervals = []
            for interval in match.group(1).split(','):
                interval_str = interval.strip()
                time_match = re.match(r'^(\d+)(h|m|s)$', interval_str)
                if time_match:
                    value = int(time_match.group(1))
                    unit = time_match.group(2)
                    seconds = value if unit == 's' else value*60 if unit == 'm' else value*3600
                    intervals.append(seconds)
            return {'type': 'remind', 'intervals': intervals, 'original': cmd_str}
        return None

    def _parse_deadline(self, cmd_str: str) -> Dict[str, Any]:
        """–ó–ê–ì–û–¢–û–í–ö–ê: –ü–∞—Ä—Å–∏–Ω–≥ deadline –∫–æ–º–∞–Ω–¥ - deadline:2h"""
        match = re.match(r'^deadline:(\d+)(h|d|m)$', cmd_str)
        if match:
            value = int(match.group(1))
            unit = match.group(2)
            seconds = value*3600 if unit == 'h' else value*86400 if unit == 'd' else value*60
            return {'type': 'deadline', 'duration': seconds, 'original': cmd_str}
        return None

    # === –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ ===
    def _execute_pause(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        duration = command['duration']
        pause_text = context.get('pause_text') or ''
        bot = context.get('bot')
        chat_id = context.get('chat_id')

        if pause_text and bot and chat_id:
            bot.send_message(chat_id, pause_text)
        threading.Timer(duration, callback).start()

    def _execute_typing(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ typing —Å preset'–∞–º–∏"""
        duration = command['duration']
        process_name = command.get('process_name', '–û–±—Ä–∞–±–æ—Ç–∫–∞')
        preset = command.get('preset', 'clean')
        exposure_time = command.get('exposure_time', 1.5)
        anti_flicker_delay = command.get('anti_flicker_delay', 1.0)
        action = command.get('action', 'delete')

        session_id = context.get('session_id')
        if session_id:
            self.save_timer_to_db(
                session_id=session_id, timer_type='typing',
                delay_seconds=int(duration), message_text=process_name,
                callback_data={'command': command, 'preset': preset}
            )

        bot = context.get('bot')
        chat_id = context.get('chat_id')
        if bot and chat_id:
            def show_progress_with_presets():
                try:
                    self._show_progress_bar_with_presets(
                        bot, chat_id, duration, process_name, 
                        show_progress=True, exposure_time=exposure_time,
                        anti_flicker_delay=anti_flicker_delay, action=action
                    )
                    callback()
                except Exception as e:
                    callback()

            threading.Thread(target=show_progress_with_presets).start()
        else:
            threading.Timer(duration, callback).start()

    def _execute_process(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–∑–∞–º–µ–Ω–∞ state: true)"""
        duration = command['duration']
        process_name = command.get('process_name', '–ü—Ä–æ—Ü–µ—Å—Å')
        preset = command.get('preset', 'clean')
        exposure_time = command.get('exposure_time', 1.5)
        anti_flicker_delay = command.get('anti_flicker_delay', 1.0)
        action = command.get('action', 'delete')

        session_id = context.get('session_id')
        if session_id:
            self.save_timer_to_db(
                session_id=session_id, timer_type='process',
                delay_seconds=int(duration), message_text=process_name,
                callback_data={'command': command, 'preset': preset}
            )

        bot = context.get('bot')
        chat_id = context.get('chat_id')
        if bot and chat_id:
            def show_static_process():
                try:
                    self._show_progress_bar_with_presets(
                        bot, chat_id, duration, process_name,
                        show_progress=False, exposure_time=exposure_time,
                        anti_flicker_delay=anti_flicker_delay, action=action
                    )
                    callback()
                except Exception as e:
                    callback()

            threading.Thread(target=show_static_process).start()
        else:
            threading.Timer(duration, callback).start()

    def _execute_timeout(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–û–ë–ù–û–í–õ–ï–ù–û: Timeout —Å Silent Mode –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–Ω—ã—Ö –ø–∞—É–∑"""

        duration = int(command['duration'])
        use_next_node_id = command.get('use_next_node_id', False)
        explicit_target = command.get('target_node')
        preset = command.get('preset', 'clean')

        preset_config = self.presets.get(preset, self.presets['clean'])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª
        if use_next_node_id:
            target_node = context.get('next_node_id')
            if not target_node:
                callback()
                return
        else:
            target_node = explicit_target

        session_id = context.get('session_id')
        bot = context.get('bot')
        chat_id = context.get('chat_id')
        question_message_id = context.get('question_message_id')

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        node_id = context.get('node_id', '')
        node_text = context.get('node_text', '')

        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º timeout
        show_countdown = self.should_show_countdown(context)

        context['timeout_target_node'] = target_node
        if hasattr(callback, 'context'):
            callback.context.update(context)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î —Å –æ—Ç–º–µ—Ç–∫–æ–π —Ä–µ–∂–∏–º–∞
        if session_id:
            self.save_timer_to_db(
                session_id=session_id, timer_type='timeout',
                delay_seconds=duration, 
                message_text=f"Timeout {duration}s ({'interactive' if show_countdown else 'silent'})",
                callback_node_id=target_node,
                callback_data={
                    'command': command, 'target_node': target_node, 'preset': preset,
                    'silent_mode': not show_countdown
                }
            )

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.debug_timers[session_id] = {
            'type': 'timeout',
            'duration': duration,
            'target_node': target_node,
            'preset': preset,
            'started_at': time.time(),
            'chat_id': chat_id,
            'question_message_id': question_message_id,
            'silent_mode': not show_countdown
        }

        if not bot or not chat_id:
            threading.Timer(duration, lambda: self._execute_timeout_callback(
                session_id, target_node, preset_config, callback, bot, chat_id, question_message_id
            )).start()
            return

        # === –†–ï–ñ–ò–ú 1: –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô TIMEOUT (—Å countdown) ===
        if show_countdown:
            print(f"[TIMING-ENGINE] INTERACTIVE timeout: {duration}s with countdown")

            message_type = self.get_countdown_message_type(duration, node_id, node_text)
            template = self.countdown_templates[message_type]

            # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            initial_time_text = self.format_countdown_time(duration)
            countdown_msg = bot.send_message(
                chat_id, 
                template['countdown'].format(time=initial_time_text)
            )

            def countdown_timer():
                """–ñ–∏–≤–æ–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""

                for remaining in range(duration-1, 0, -1):
                    time.sleep(1)

                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–º–µ–Ω—É
                    if session_id in self.cancelled_tasks:
                        try:
                            bot.edit_message_text(
                                chat_id=chat_id, 
                                message_id=countdown_msg.message_id,
                                text="‚úÖ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω, –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω"
                            )
                            time.sleep(1.5)
                            bot.delete_message(chat_id, countdown_msg.message_id)
                        except Exception:
                            pass

                        self.cancelled_tasks.discard(session_id)
                        return

                    # –û–±–Ω–æ–≤–∏—Ç—å —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
                    try:
                        time_text = self.format_countdown_time(remaining)
                        bot.edit_message_text(
                            chat_id=chat_id, 
                            message_id=countdown_msg.message_id,
                            text=template['countdown'].format(time=time_text)
                        )
                    except Exception:
                        pass

                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
                if session_id in self.cancelled_tasks:
                    self.cancelled_tasks.discard(session_id)
                    return

                # –£–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ü–ï–†–ï–î –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                if question_message_id:
                    try:
                        bot.edit_message_reply_markup(
                            chat_id=chat_id, 
                            message_id=question_message_id, 
                            reply_markup=None
                        )
                    except Exception:
                        pass

                # –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    bot.edit_message_text(
                        chat_id=chat_id, 
                        message_id=countdown_msg.message_id, 
                        text=template['final']
                    )
                except Exception:
                    pass

                # –í—ã–ø–æ–ª–Ω–∏—Ç—å callback —Å preset –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
                self._execute_timeout_callback(session_id, target_node, preset_config, callback, bot, chat_id, question_message_id)

                # –£–¥–∞–ª–∏—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    time.sleep(1)
                    bot.delete_message(chat_id, countdown_msg.message_id)
                except Exception:
                    pass

            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
            countdown_thread = threading.Thread(target=countdown_timer, daemon=True)
            countdown_thread.start()

            if session_id:
                self.active_timeouts[session_id] = countdown_thread

        # === –†–ï–ñ–ò–ú 2: –¢–ò–•–ò–ô TIMEOUT (–±–µ–∑ countdown) ===
        else:
            print(f"[TIMING-ENGINE] SILENT timeout: {duration}s (scenic pause)")

            # –ü–æ–∫–∞–∑–∞—Ç—å pause_text –µ—Å–ª–∏ –µ—Å—Ç—å
            pause_text = context.get('pause_text', '').strip()
            if pause_text:
                bot.send_message(chat_id, pause_text)
                print(f"[TIMING-ENGINE] Sent pause_text: '{pause_text[:50]}...'")

            def silent_timeout():
                """–¢–∏—Ö–∏–π timeout –±–µ–∑ countdown —Å–æ–æ–±—â–µ–Ω–∏–π"""
                time.sleep(duration)

                if session_id in self.cancelled_tasks:
                    self.cancelled_tasks.discard(session_id)
                    return

                print(f"[TIMING-ENGINE] Silent timeout completed: {duration}s")
                self._execute_timeout_callback(session_id, target_node, preset_config, callback, bot, chat_id, question_message_id)

            timeout_thread = threading.Thread(target=silent_timeout, daemon=True)
            timeout_thread.start()
            if session_id:
                self.active_timeouts[session_id] = timeout_thread

    def _execute_timeout_callback(self, session_id: int, target_node: str, preset_config: dict, 
                                 callback: Callable, bot=None, chat_id=None, question_message_id=None):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å callback —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º preset –∑–∞–¥–µ—Ä–∂–µ–∫"""

        if session_id in self.cancelled_tasks:
            self.cancelled_tasks.discard(session_id)
            return

        exposure_time = preset_config.get('exposure_time', 0)
        anti_flicker_delay = preset_config.get('anti_flicker_delay', 0)

        if exposure_time > 0:
            time.sleep(exposure_time)

        try:
            callback()
        except Exception as e:
            logger.error(f"Timeout callback error: {e}")

        if anti_flicker_delay > 0:
            time.sleep(anti_flicker_delay)

        # –û—á–∏—Å—Ç–∫–∞
        if session_id in self.debug_timers:
            del self.debug_timers[session_id]
        if session_id in self.active_timeouts:
            del self.active_timeouts[session_id]

    # –ó–ê–ì–û–¢–û–í–ö–ò –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π  
    def _execute_daily(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–ó–ê–ì–û–¢–û–í–ö–ê: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print(f"[TIMING-ENGINE] Daily scheduling stub: {command.get('original', 'N/A')}")
        callback()

    def _execute_remind(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–ó–ê–ì–û–¢–û–í–ö–ê: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print(f"[TIMING-ENGINE] Reminder system stub: {command.get('original', 'N/A')}")
        callback()

    def _execute_deadline(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–ó–ê–ì–û–¢–û–í–ö–ê: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
        print(f"[TIMING-ENGINE] Deadline system stub: {command.get('original', 'N/A')}")
        callback()

    def _show_progress_bar_with_presets(self, bot, chat_id, duration, process_name, 
                                       show_progress=True, exposure_time=1.5, 
                                       anti_flicker_delay=1.0, action='delete'):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if show_progress:
                # –ü–†–û–ì–†–ï–°–°-–ë–ê–†
                msg = bot.send_message(chat_id, f"üöÄ {process_name}\n‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú 0%")

                steps = 5
                step_duration = duration / steps
                for i in range(1, steps + 1):
                    time.sleep(step_duration)
                    progress = int((i / steps) * 100)
                    filled = "üü©" * i
                    empty = "‚¨ú" * (steps - i)

                    try:
                        bot.edit_message_text(
                            chat_id=chat_id, message_id=msg.message_id,
                            text=f"üöÄ {process_name}\n{filled}{empty} {progress}%"
                        )
                    except Exception:
                        pass

                try:
                    bot.edit_message_text(
                        chat_id=chat_id, message_id=msg.message_id,
                        text=f"‚úÖ {process_name}\nüü©üü©üü©üü©üü© 100%"
                    )
                except Exception:
                    pass

            else:
                # –°–¢–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–û–ë–©–ï–ù–ò–ï
                msg = bot.send_message(chat_id, f"‚öôÔ∏è {process_name}...")
                time.sleep(duration)

                try:
                    bot.edit_message_text(
                        chat_id=chat_id, message_id=msg.message_id,
                        text=f"‚úÖ {process_name}"
                    )
                except Exception:
                    pass

            # –≠–ö–°–ü–û–ó–ò–¶–ò–Ø + –£–î–ê–õ–ï–ù–ò–ï + ANTI-FLICKER
            if exposure_time > 0:
                time.sleep(exposure_time)

            if action == 'delete':
                try:
                    bot.delete_message(chat_id=chat_id, message_id=msg.message_id)
                except Exception:
                    pass

            if anti_flicker_delay > 0:
                time.sleep(anti_flicker_delay)

        except Exception as e:
            logger.error(f"Process with presets failed: {e}")

    def process_timing(self, user_id: int, session_id: int, node_id: str, 
                       timing_config: str, callback: Callable, **context) -> None:
        """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ timing –∫–æ–º–∞–Ω–¥"""
        if not self.enabled:
            callback()
            return

        try:
            enriched_context = dict(context)
            enriched_context['session_id'] = session_id
            enriched_context['node_id'] = node_id

            self.execute_timing(timing_config, callback, **enriched_context)

        except Exception as e:
            logger.error(f"process_timing error: {e}")
            callback()

    # === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ timeout ===
    def cancel_timeout_task(self, session_id: int) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π timeout –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        self.cancelled_tasks.add(session_id)

        timer_key = f"timeout_{session_id}"
        if timer_key in self.active_timers:
            timer = self.active_timers[timer_key]
            timer.cancel()
            del self.active_timers[timer_key]

        if session_id in self.debug_timers:
            del self.debug_timers[session_id]

        if session_id in self.active_timeouts:
            del self.active_timeouts[session_id]

        return True

    def cleanup_timeout_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö timeout –∑–∞–¥–∞—á"""
        completed = [sid for sid, thread in self.active_timeouts.items() if not thread.is_alive()]
        for session_id in completed:
            del self.active_timeouts[session_id]
            self.cancelled_tasks.discard(session_id)

    def cancel_user_timers(self, user_id: int) -> None:
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        to_cancel = [key for key in self.active_timers.keys() if key.startswith(f"{user_id}_")]
        for key in to_cancel:
            timer = self.active_timers.pop(key)
            timer.cancel()

    def get_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å timing —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'enabled': self.enabled,
            'active_timers': len(self.active_timers),
            'active_timeouts': len(self.active_timeouts),
            'cancelled_tasks': len(self.cancelled_tasks),
            'debug_timers': len(self.debug_timers),
            'available_parsers': list(self.parsers.keys()),
            'available_executors': list(self.executors.keys()),
            'available_presets': list(self.presets.keys()),
            'countdown_message_types': list(self.countdown_templates.keys())
        }

    def enable(self) -> None:
        """–í–∫–ª—é—á–∏—Ç—å timing —Å–∏—Å—Ç–µ–º—É"""
        self.enabled = True

    def disable(self) -> None:
        """–í—ã–∫–ª—é—á–∏—Ç—å timing —Å–∏—Å—Ç–µ–º—É"""
        self.enabled = False
        for timer in self.active_timers.values():
            timer.cancel()
        self.active_timers.clear()
        self.cancelled_tasks.clear()
        self.active_timeouts.clear()
        self.debug_timers.clear()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
timing_engine = TimingEngine()

# –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def process_node_timing(user_id: int, session_id: int, node_id: str, 
                        timing_config: str, callback: Callable, **context) -> None:
    return timing_engine.process_timing(user_id, session_id, node_id, timing_config, callback, **context)

def cancel_timeout_for_session(session_id: int) -> bool:
    """–ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã timeout"""
    return timing_engine.cancel_timeout_task(session_id)

def enable_timing() -> None:
    global TIMING_ENABLED
    TIMING_ENABLED = True
    timing_engine.enable()

def disable_timing() -> None:
    global TIMING_ENABLED  
    TIMING_ENABLED = False
    timing_engine.disable()

def get_timing_status() -> Dict[str, Any]:
    return timing_engine.get_status()
