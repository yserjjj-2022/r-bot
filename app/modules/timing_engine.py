# -*- coding: utf-8 -*-
"""
R-Bot Timing Engine - —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ countdown —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ Silent Mode

–û–ë–ù–û–í–õ–ï–ù–ò–Ø:
06.10.2025 - –î–û–ë–ê–í–õ–ï–ù–´ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ countdown —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤)
06.10.2025 - –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ —Ä–∞–∑—Ä—è–¥—ã) 
06.10.2025 - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
06.10.2025 - –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ timeout
06.10.2025 - –î–û–ë–ê–í–õ–ï–ù Silent Mode –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–Ω—ã—Ö timeout'–æ–≤
06.10.2025 - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è daily/remind/deadline (–¥–ª—è –±—É–¥—É—â–∏—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤)
30.10.2025 - –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –∫ –ø—Ä–∏–º–∏—Ç–∏–≤–∞–º: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ DynamicPause –¥–ª—è typing/process
30.10.2025 - –ê–ö–¢–ò–í–ò–†–û–í–ê–ù progressbar —Ä–µ–∂–∏–º –¥–ª—è typing –∫–æ–º–∞–Ω–¥
30.10.2025 - –ü–ê–†–°–ï–† typing —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–±–µ–ª–∞–º–∏

DSL –∫–æ–º–∞–Ω–¥—ã:
- timeout:15s:no_answer - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π timeout —Å countdown (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏)
- timeout:5s:slow - —Ç–∏—Ö–∏–π timeout –¥–ª—è –¥—Ä–∞–º–∞—Ç—É—Ä–≥–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å pause_text)  
- typing:5s:–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤...:clean - –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä 5s —Å preset clean (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏)
- daily@09:00MSK - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
- remind:5m,1h,1d - —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)  
- deadline:2h - –¥–µ–¥–ª–∞–π–Ω—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
"""

import threading
import time
import re
import logging
from datetime import timedelta, datetime, date
from typing import Dict, Any, Callable, Optional, List, Set

from app.modules.database.models import ActiveTimer, utc_now
from app.modules.database import SessionLocal
from app.modules.timing_primitives.dynamic_pause import DynamicPause

TIMING_ENABLED = True
logger = logging.getLogger(__name__)

# === –í–ù–ò–ú–ê–ù–ò–ï: –±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞! –§—É–Ω–∫—Ü–∏–∏ –∫–ª–∞—Å—Å–∞ –Ω–∏–∂–µ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ TimingEngine ===

class TimingEngine:
    """
    Timing Engine —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ countdown —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, Silent Mode 
    –∏ –≥–æ—Ç–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    """

    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if hasattr(self, 'initialized'):
            return

        self.enabled = TIMING_ENABLED
        self.active_timers: Dict[str, threading.Timer] = {}
        self.parsers = self._init_parsers()
        self.executors = self._init_executors()
        self.presets = self._init_presets()

        # –î–ª—è timeout –∑–∞–¥–∞—á
        self.cancelled_tasks: Set[int] = set()         
        self.active_timeouts: Dict[int, threading.Thread] = {}  
        self.debug_timers: Dict[int, Dict] = {}  

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã countdown —Å–æ–æ–±—â–µ–Ω–∏–π
        self.countdown_templates = self._init_countdown_templates()

        self.initialized = True

        logger.info(f"TimingEngine initialized with Silent Mode. Enabled: {self.enabled}")
        print(f"[TIMING-ENGINE] TimingEngine initialized with enabled={self.enabled}")
        print(f"[TIMING-ENGINE] Available presets: {list(self.presets.keys())}")
        print(f"[TIMING-ENGINE] Available commands: {list(self.parsers.keys())}")
        print(f"[TIMING-ENGINE] Adaptive message types: {list(self.countdown_templates.keys())}")
        print(f"[TIMING-ENGINE] Silent Mode activated for scenic timeouts")

        if self.enabled:
            try:
                self.restore_timers_from_db()
                self.cleanup_expired_timers()
            except Exception as e:
                logger.error(f"Failed to restore/cleanup timers on init: {e}")

    def _init_countdown_templates(self) -> Dict[str, Dict[str, str]]:
        return {
            'urgent': {'countdown': "üö® –í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å: {time}", 'final': "üö® –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!"},
            'choice': {'countdown': "‚è≥ –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑: {time}", 'final': "‚è∞ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ"},
            'decision': {'countdown': "‚è≥ –ù–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å: {time}", 'final': "‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ"},
            'answer': {'countdown': "‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {time}", 'final': "‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ç–µ–∫–ª–æ"},
            'gentle': {'countdown': "üí≠ –í—Ä–µ–º—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏: {time}", 'final': "üí≠ –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏—Å—Ç–µ–∫–ª–æ"},
            'generic': {'countdown': "‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time}", 'final': "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"}
        }

    def format_countdown_time(self, seconds: int) -> str:
        if seconds <= 0:
            return "–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        secs = seconds % 60
        parts = []
        if hours > 0:
            form = "—á–∞—Å" if hours == 1 else ("—á–∞—Å–∞" if 2 <= hours <= 4 else "—á–∞—Å–æ–≤")
            parts.append(f"{hours} {form}")
        if minutes > 0:
            form = "–º–∏–Ω—É—Ç—É" if minutes == 1 else ("–º–∏–Ω—É—Ç—ã" if 2 <= minutes <= 4 else "–º–∏–Ω—É—Ç")
            parts.append(f"{minutes} {form}")
        if secs > 0 or not parts:
            form = "—Å–µ–∫—É–Ω–¥—É" if secs == 1 else ("—Å–µ–∫—É–Ω–¥—ã" if 2 <= secs <= 4 else "—Å–µ–∫—É–Ω–¥")
            parts.append(f"{secs} {form}")
        return " ".join(parts)

    def _init_presets(self) -> Dict[str, Dict[str, Any]]:
        return {
            'clean': {'exposure_time': 1.5, 'anti_flicker_delay': 1.0, 'action': 'delete'},
            'keep': {'exposure_time': 0, 'anti_flicker_delay': 0.5, 'action': 'keep'},
            'fast': {'exposure_time': 0.8, 'anti_flicker_delay': 0.5, 'action': 'delete'},
            'slow': {'exposure_time': 3.0, 'anti_flicker_delay': 2.0, 'action': 'delete'},
            'instant': {'exposure_time': 0, 'anti_flicker_delay': 0, 'action': 'delete'}
        }

    def _init_parsers(self) -> Dict[str, Any]:
        return {
            'basic_pause': self._parse_basic_pause,
            'typing': self._parse_typing,
            'process': self._parse_process,
            'timeout': self._parse_timeout,
            'daily': self._parse_daily,
            'remind': self._parse_remind,
            'deadline': self._parse_deadline
        }

    def _init_executors(self) -> Dict[str, Any]:
        return {
            'pause': self._execute_pause,
            'typing': self._execute_typing,
            'process': self._execute_process,
            'timeout': self._execute_timeout,
            'daily': self._execute_daily,
            'remind': self._execute_remind,
            'deadline': self._execute_deadline
        }

    def _parse_basic_pause(self, cmd_str: str) -> Dict[str, Any]:
        m = re.match(r'^\d+(?:\.\d+)?s?$', cmd_str)
        if not m:
            return None
        duration = float(cmd_str.replace('s', ''))
        return {'type': 'pause', 'duration': duration, 'process_name': '–ü–∞—É–∑–∞', 'original': cmd_str}

    def _parse_typing(self, cmd_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ typing –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ preset"""
        m = re.match(r'^typing:(\d+(?:\.\d+)?)s?(?::(.*))?$', cmd_str)
        if not m:
            return None
        duration = float(m.group(1))
        tail = m.group(2) or ''
        process_name = '–û–±—Ä–∞–±–æ—Ç–∫–∞'
        preset = 'clean'
        if tail:
            if ':' in tail:
                process_name, preset = tail.split(':', 1)
            else:
                process_name = tail
            process_name = process_name.strip()
            preset = (preset or 'clean').strip()
        return {
            'type': 'typing', 'duration': duration, 'process_name': process_name, 'preset': preset,
            'exposure_time': self.presets.get(preset, self.presets['clean'])['exposure_time'],
            'anti_flicker_delay': self.presets.get(preset, self.presets['clean'])['anti_flicker_delay'],
            'action': self.presets.get(preset, self.presets['clean'])['action'],
            'show_progress': True, 'original': cmd_str
        }

    # –¥–∞–ª–µ–µ –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ TimingEngine (executors, helpers, public API)
