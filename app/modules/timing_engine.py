# -*- coding: utf-8 -*-

"""

R-Bot Timing Engine - —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫ —Å SIMPLE DAILY —Å–∏—Å—Ç–µ–º–æ–π

–û–ë–ù–û–í–õ–ï–ù–ò–Ø:

08.10.2025 - SIMPLE DAILY FIX: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è daily —Å–∏—Å—Ç–µ–º–∞ —Å –ø—Ä—è–º—ã–º send_node_message
06.10.2025 - –î–û–ë–ê–í–õ–ï–ù–´ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ countdown —Å–æ–æ–±—â–µ–Ω–∏—è
06.10.2025 - –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏  
06.10.2025 - Silent Mode –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–Ω—ã—Ö timeout'–æ–≤
06.10.2025 - –ö–æ–Ω—Ç—Ä–æ–ª—å —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ —Å preset'–∞–º–∏

DSL –∫–æ–º–∞–Ω–¥—ã:

- timeout:15s:no_answer - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π timeout —Å countdown
- timeout:5s:slow - —Ç–∏—Ö–∏–π timeout –¥–ª—è –¥—Ä–∞–º–∞—Ç—É—Ä–≥–∏–∏
- typing:5s:–ê–Ω–∞–ª–∏–∑:clean - –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å preset'–∞–º–∏
- process:3s:–û–±—Ä–∞–±–æ—Ç–∫–∞:fast - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å
- daily@18:40:MSK:until:2025-10-17:wd>final_questions - –ù–û–í–û–ï: –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è daily —Å–∏—Å—Ç–µ–º–∞

"""

import threading
import time
import re
import logging
from datetime import timedelta, datetime, date
from typing import Dict, Any, Callable, Optional, List, Set
import pytz
from app.modules.database.models import ActiveTimer, utc_now
from app.modules.database import SessionLocal

TIMING_ENABLED = True
logger = logging.getLogger(__name__)

class TimingEngine:
    """
    Timing Engine —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ countdown —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, Silent Mode
    –∏ SIMPLE DAILY —Å–∏—Å—Ç–µ–º–æ–π
    """
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if hasattr(self, 'initialized'):
            return

        self.enabled = TIMING_ENABLED
        self.active_timers: Dict[str, threading.Timer] = {}
        self.parsers = self._init_parsers()
        self.executors = self._init_executors()
        self.presets = self._init_presets()

        # –î–ª—è timeout –∑–∞–¥–∞—á
        self.cancelled_tasks: Set[int] = set()
        self.active_timeouts: Dict[int, threading.Thread] = {}
        self.debug_timers: Dict[int, Dict] = {}

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã countdown —Å–æ–æ–±—â–µ–Ω–∏–π
        self.countdown_templates = self._init_countdown_templates()

        # –ü–†–û–°–¢–ê–Ø DAILY –°–ò–°–¢–ï–ú–ê
        self.active_daily_configs = {}  # daily –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏  
        self.daily_participation_stats = {}  # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–∏—è

        self.initialized = True
        logger.info(f"TimingEngine initialized with Simple Daily. Enabled: {self.enabled}")
        print(f"[TIMING-ENGINE] TimingEngine initialized with enabled={self.enabled}")
        print(f"[TIMING-ENGINE] Available presets: {list(self.presets.keys())}")
        print(f"[TIMING-ENGINE] Available commands: {list(self.parsers.keys())}")
        print(f"[TIMING-ENGINE] SIMPLE DAILY system: ‚úÖ")

        if self.enabled:
            try:
                self.restore_timers_from_db()
                self.cleanup_expired_timers()
            except Exception as e:
                logger.error(f"Failed to restore/cleanup timers on init: {e}")

    # ============================================================================
    # SIMPLE DAILY –°–ò–°–¢–ï–ú–ê
    # ============================================================================

    def _parse_daily(self, cmd_str: str) -> Dict[str, Any]:
        """SIMPLE DAILY: –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö daily –∫–æ–º–∞–Ω–¥"""
        print(f"[SIMPLE-DAILY] Parsing: {cmd_str}")

        # daily@HH:MM:TZN:until:YYYY-MM-DD:wd>node
        pattern = r'^daily@(\d{1,2}):(\d{2})(?::([A-Z]{3}))?(?::until:(\d{4}-\d{2}-\d{2}))?(?::(wd))?(?:>([^\s]+))?$'
        match = re.match(pattern, cmd_str)

        if match:
            hour = int(match.group(1))
            minute = int(match.group(2))
            timezone_str = match.group(3) or 'MSK'
            until_date_str = match.group(4)
            workdays_only = bool(match.group(5))
            on_complete_node = match.group(6)

            until_date = datetime.strptime(until_date_str, '%Y-%m-%d').date() if until_date_str else (datetime.now().date() + timedelta(days=1))

            result = {
                'type': 'daily',
                'hour': hour, 'minute': minute, 'timezone': timezone_str,
                'until_date': until_date, 'workdays_only': workdays_only,
                'on_complete_node': on_complete_node, 'original': cmd_str
            }
            print(f"[SIMPLE-DAILY] Parsed: {result}")
            return result

        return None

    def _execute_daily(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """SIMPLE DAILY: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π daily —Å–∏—Å—Ç–µ–º—ã"""
        session_id = context.get('session_id')
        chat_id = context.get('chat_id')
        bot = context.get('bot')

        if not all([session_id, chat_id, bot]):
            print(f"[SIMPLE-DAILY] Missing context, fallback to callback")
            callback()
            return

        print(f"[SIMPLE-DAILY] Starting daily cycle for session {session_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        daily_key = f"daily_{session_id}_{command['hour']}_{command['minute']}"
        self.active_daily_configs[daily_key] = {
            'command': command,
            'callback': callback,  
            'context': context
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.daily_participation_stats[daily_key] = {
            'participated_days': 0,
            'total_days': 0,
            'start_date': datetime.now().date()
        }

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π callback (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ daily_start, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ü–∏–∫–ª—É)
        callback()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π daily timer
        self._schedule_next_daily(daily_key)

    def _schedule_next_daily(self, daily_key: str):
        """SIMPLE DAILY: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ daily timer"""
        if daily_key not in self.active_daily_configs:
            print(f"[SIMPLE-DAILY] Config not found for {daily_key}")
            return

        config = self.active_daily_configs[daily_key]
        command = config['command']
        callback = config['callback']
        context = config['context']

        hour = command['hour']
        minute = command['minute']
        until_date = command['until_date']
        on_complete_node = command.get('on_complete_node')

        bot = context.get('bot')
        chat_id = context.get('chat_id')
        session_id = context.get('session_id')

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è daily
        now = datetime.now()
        today = now.replace(hour=hour, minute=minute, second=0, microsecond=0)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è, –∏–Ω–∞—á–µ –∑–∞–≤—Ç—Ä–∞
        next_daily = today if now < today else today + timedelta(days=1)

        # –ü–†–û–°–¢–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ cutoff
        if next_daily.date() > until_date:
            print(f"[SIMPLE-DAILY] Next daily {next_daily.date()} > cutoff {until_date}, not scheduling")
            return

        delay_seconds = (next_daily - now).total_seconds()
        print(f"[SIMPLE-DAILY] Next daily: {next_daily} (in {delay_seconds/60:.1f}m)")

        def simple_daily_callback():
            """–ü–†–û–°–¢–ê–Ø daily –ª–æ–≥–∏–∫–∞ - –ë–ï–ó –°–õ–û–ñ–ù–û–°–¢–ï–ô!"""
            current_date = datetime.now().date()
            print(f"[SIMPLE-DAILY] Timer fired! Current: {current_date}, cutoff: {until_date}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if daily_key in self.daily_participation_stats:
                stats = self.daily_participation_stats[daily_key]
                stats['total_days'] += 1
                print(f"[SIMPLE-DAILY] Stats updated: {stats['participated_days']}/{stats['total_days']}")

            if current_date > until_date:
                # –ü–ï–†–ò–û–î –ó–ê–ö–û–ù–ß–ï–ù - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏—Ç–æ–≥–∞–º
                print(f"[SIMPLE-DAILY] Period ended, transitioning to final questions")

                # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if daily_key in self.daily_participation_stats:
                    stats = self.daily_participation_stats[daily_key]
                    stats_msg = f"üéâ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüìä –í–∞—à–µ —É—á–∞—Å—Ç–∏–µ: {stats['participated_days']} –∏–∑ {stats['total_days']} –¥–Ω–µ–π\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Ç–æ–≥–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º..."
                    bot.send_message(chat_id, stats_msg)
                    time.sleep(2)

                # CRUD –ø–æ–¥—Ö–æ–¥ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
                try:
                    from app.modules.database import crud
                    db = SessionLocal()
                    crud.end_session(db, session_id)
                    db.close()
                    print(f"[SIMPLE-DAILY] Session ended via crud")
                except Exception as e:
                    print(f"[SIMPLE-DAILY] CRUD end_session failed: {e}")

                # –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                try:
                    from app.modules.telegram_handler import user_sessions
                    if chat_id in user_sessions:
                        del user_sessions[chat_id]
                        print(f"[SIMPLE-DAILY] Cleared user_sessions")
                except Exception as e:
                    print(f"[SIMPLE-DAILY] Failed to clear user_sessions: {e}")

                # –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏—Ç–æ–≥–∞–º
                if on_complete_node:
                    try:
                        from app.modules.telegram_handler import send_node_message
                        send_node_message(chat_id, on_complete_node)
                        print(f"[SIMPLE-DAILY] SUCCESS: Transitioned to {on_complete_node}")
                    except Exception as e:
                        print(f"[SIMPLE-DAILY] Transition failed: {e}")
                        bot.send_message(chat_id, f"üîÑ –î–ª—è –∏—Ç–æ–≥–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '{on_complete_node}'")

                # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                self.active_daily_configs.pop(daily_key, None)

            else:
                # –û–ë–´–ß–ù–´–ô –î–ï–ù–¨ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º question1
                print(f"[SIMPLE-DAILY] Regular day, sending question1")

                try:
                    from app.modules.telegram_handler import send_node_message
                    send_node_message(chat_id, 'question1')  # –ù–ê–ß–ê–õ–û –î–ù–ï–í–ù–û–ì–û –¶–ò–ö–õ–ê
                    print(f"[SIMPLE-DAILY] SUCCESS: Sent question1")

                    # –û—Ç–º–µ—á–∞–µ–º —É—á–∞—Å—Ç–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –≤–æ–ø—Ä–æ—Å—ã)
                    if daily_key in self.daily_participation_stats:
                        self.daily_participation_stats[daily_key]['participated_days'] += 1

                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π daily
                    self._schedule_next_daily(daily_key)

                except Exception as e:
                    print(f"[SIMPLE-DAILY] Failed to send question1: {e}")

        # –°–æ–∑–¥–∞–µ–º timer
        try:
            timer = threading.Timer(delay_seconds, simple_daily_callback)
            timer.daemon = True
            timer.name = f"SimpleDaily-{daily_key}-{int(time.time())}"
            timer.start()

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π timer –µ—Å–ª–∏ –µ—Å—Ç—å
            old_timer = self.active_timers.get(daily_key)
            if old_timer:
                old_timer.cancel()

            self.active_timers[daily_key] = timer
            print(f"[SIMPLE-DAILY] Timer scheduled: {timer.name}")

        except Exception as e:
            print(f"[SIMPLE-DAILY] Timer creation failed: {e}")

    # ============================================================================
    # –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ò–ó –°–¢–ê–ë–ò–õ–¨–ù–û–ì–û timing_engine.py –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
    # ============================================================================

    def _parse_basic_pause(self, cmd_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—É–∑"""
        match = re.match(r'^\d+(\.\d+)?(s)?$', cmd_str)
        if match:
            duration = float(cmd_str.replace('s', ''))
            return {'type': 'pause', 'duration': duration, 'process_name': '–ü–∞—É–∑–∞', 'original': cmd_str}
        return None

    def _parse_typing(self, cmd_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ typing –∫–æ–º–∞–Ω–¥ —Å preset'–∞–º–∏"""
        pattern = r'^typing:(\d+(?:\.\d+)?)s?(?::([^:]+))?(?::([^:]+))?$'
        match = re.match(pattern, cmd_str)

        if match:
            duration = float(match.group(1))
            process_name = match.group(2) if match.group(2) else "–û–±—Ä–∞–±–æ—Ç–∫–∞"
            preset = match.group(3) if match.group(3) else 'clean'
            preset_config = self.presets.get(preset, self.presets['clean'])

            return {
                'type': 'typing',
                'duration': duration,
                'process_name': process_name,
                'preset': preset,
                'exposure_time': preset_config['exposure_time'],
                'anti_flicker_delay': preset_config['anti_flicker_delay'],
                'action': preset_config['action'],
                'show_progress': True,
                'original': cmd_str
            }
        return None

    def _parse_process(self, cmd_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ process –∫–æ–º–∞–Ω–¥ (–∑–∞–º–µ–Ω–∞ state: true)"""
        pattern = r'^process:(\d+(?:\.\d+)?)s?:([^:]+)(?::([^:]+))?$'
        match = re.match(pattern, cmd_str)

        if match:
            duration = float(match.group(1))
            process_name = match.group(2)
            preset = match.group(3) if match.group(3) else 'clean'
            preset_config = self.presets.get(preset, self.presets['clean'])

            return {
                'type': 'process',
                'duration': duration,
                'process_name': process_name,
                'preset': preset,
                'exposure_time': preset_config['exposure_time'],
                'anti_flicker_delay': preset_config['anti_flicker_delay'],
                'action': preset_config['action'],
                'show_progress': False,
                'original': cmd_str
            }
        return None

    def _parse_timeout(self, cmd_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ timeout –∫–æ–º–∞–Ω–¥—ã"""
        known_presets = set(self.presets.keys())

        pattern_with_arg = r'^timeout:(\d+(?:\.\d+)?)s:([^:]+)$'
        match_with_arg = re.match(pattern_with_arg, cmd_str)

        if match_with_arg:
            duration = float(match_with_arg.group(1))
            arg = match_with_arg.group(2).strip()

            if arg in known_presets:
                return {
                    'type': 'timeout',
                    'duration': duration,
                    'target_node': None,
                    'use_next_node_id': True,
                    'preset': arg,
                    'show_countdown': True,
                    'original': cmd_str
                }
            else:
                return {
                    'type': 'timeout',
                    'duration': duration,
                    'target_node': arg,
                    'use_next_node_id': False,
                    'preset': 'clean',
                    'show_countdown': True,
                    'original': cmd_str
                }

        pattern_simple = r'^timeout:(\d+(?:\.\d+)?)s$'
        match_simple = re.match(pattern_simple, cmd_str)

        if match_simple:
            duration = float(match_simple.group(1))
            return {
                'type': 'timeout',
                'duration': duration,
                'target_node': None,
                'use_next_node_id': True,
                'preset': 'clean',
                'show_countdown': True,
                'original': cmd_str
            }

        return None

    # –ó–ê–ì–û–¢–û–í–ö–ò –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    def _parse_remind(self, cmd_str: str) -> Dict[str, Any]:
        """–ó–ê–ì–û–¢–û–í–ö–ê: remind –∫–æ–º–∞–Ω–¥—ã"""
        print(f"[TIMING-ENGINE] Remind stub: {cmd_str}")
        return None

    def _parse_deadline(self, cmd_str: str) -> Dict[str, Any]:
        """–ó–ê–ì–û–¢–û–í–ö–ê: deadline –∫–æ–º–∞–Ω–¥—ã"""
        print(f"[TIMING-ENGINE] Deadline stub: {cmd_str}")
        return None

    # ============================================================================
    # –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò
    # ============================================================================

    def _execute_pause(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—É–∑"""
        duration = command['duration']
        pause_text = context.get('pause_text') or ''
        bot = context.get('bot')
        chat_id = context.get('chat_id')

        if pause_text and bot and chat_id:
            bot.send_message(chat_id, pause_text)

        threading.Timer(duration, callback).start()

    def _execute_typing(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ typing —Å preset'–∞–º–∏"""
        duration = command['duration']
        process_name = command.get('process_name', '–û–±—Ä–∞–±–æ—Ç–∫–∞')
        preset = command.get('preset', 'clean')
        exposure_time = command.get('exposure_time', 1.5)
        anti_flicker_delay = command.get('anti_flicker_delay', 1.0)
        action = command.get('action', 'delete')

        session_id = context.get('session_id')
        if session_id:
            self.save_timer_to_db(
                session_id=session_id, timer_type='typing',
                delay_seconds=int(duration), message_text=process_name,
                callback_data={'command': command, 'preset': preset}
            )

        bot = context.get('bot')
        chat_id = context.get('chat_id')

        if bot and chat_id:
            def show_progress_with_presets():
                try:
                    self._show_progress_bar_with_presets(
                        bot, chat_id, duration, process_name,
                        show_progress=True, exposure_time=exposure_time,
                        anti_flicker_delay=anti_flicker_delay, action=action
                    )
                    callback()
                except Exception as e:
                    callback()

            threading.Thread(target=show_progress_with_presets).start()
        else:
            threading.Timer(duration, callback).start()

    def _execute_process(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        duration = command['duration']
        process_name = command.get('process_name', '–ü—Ä–æ—Ü–µ—Å—Å')
        preset = command.get('preset', 'clean')
        exposure_time = command.get('exposure_time', 1.5)
        anti_flicker_delay = command.get('anti_flicker_delay', 1.0)
        action = command.get('action', 'delete')

        session_id = context.get('session_id')
        if session_id:
            self.save_timer_to_db(
                session_id=session_id, timer_type='process',
                delay_seconds=int(duration), message_text=process_name,
                callback_data={'command': command, 'preset': preset}
            )

        bot = context.get('bot')
        chat_id = context.get('chat_id')

        if bot and chat_id:
            def show_static_process():
                try:
                    self._show_progress_bar_with_presets(
                        bot, chat_id, duration, process_name,
                        show_progress=False, exposure_time=exposure_time,
                        anti_flicker_delay=anti_flicker_delay, action=action
                    )
                    callback()
                except Exception as e:
                    callback()

            threading.Thread(target=show_static_process).start()
        else:
            threading.Timer(duration, callback).start()

    def _execute_timeout(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """Timeout —Å Silent Mode"""
        duration = int(command['duration'])
        use_next_node_id = command.get('use_next_node_id', False)
        explicit_target = command.get('target_node')
        preset = command.get('preset', 'clean')
        preset_config = self.presets.get(preset, self.presets['clean'])

        if use_next_node_id:
            target_node = context.get('next_node_id')
            if not target_node:
                callback()
                return
        else:
            target_node = explicit_target

        session_id = context.get('session_id')
        bot = context.get('bot')
        chat_id = context.get('chat_id')
        question_message_id = context.get('question_message_id')

        node_id = context.get('node_id', '')
        node_text = context.get('node_text', '')

        show_countdown = self.should_show_countdown(context)

        context['timeout_target_node'] = target_node
        if hasattr(callback, 'context'):
            callback.context.update(context)

        if session_id:
            self.save_timer_to_db(
                session_id=session_id, timer_type='timeout',
                delay_seconds=duration,
                message_text=f"Timeout {duration}s ({'interactive' if show_countdown else 'silent'})",
                callback_node_id=target_node,
                callback_data={
                    'command': command, 'target_node': target_node, 'preset': preset,
                    'silent_mode': not show_countdown
                }
            )

        self.debug_timers[session_id] = {
            'type': 'timeout',
            'duration': duration,
            'target_node': target_node,
            'preset': preset,
            'started_at': time.time(),
            'chat_id': chat_id,
            'question_message_id': question_message_id,
            'silent_mode': not show_countdown
        }

        if not bot or not chat_id:
            threading.Timer(duration, lambda: self._execute_timeout_callback(
                session_id, target_node, preset_config, callback, bot, chat_id, question_message_id
            )).start()
            return

        # –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô TIMEOUT (—Å countdown)
        if show_countdown:
            print(f"[TIMING-ENGINE] INTERACTIVE timeout: {duration}s with countdown")

            message_type = self.get_countdown_message_type(duration, node_id, node_text)
            template = self.countdown_templates[message_type]

            initial_time_text = self.format_countdown_time(duration)
            countdown_msg = bot.send_message(
                chat_id,
                template['countdown'].format(time=initial_time_text)
            )

            def countdown_timer():
                """–ñ–∏–≤–æ–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç"""
                for remaining in range(duration-1, 0, -1):
                    time.sleep(1)

                    if session_id in self.cancelled_tasks:
                        try:
                            bot.edit_message_text(
                                chat_id=chat_id,
                                message_id=countdown_msg.message_id,
                                text="‚úÖ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω, –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω"
                            )
                            time.sleep(1.5)
                            bot.delete_message(chat_id, countdown_msg.message_id)
                        except Exception:
                            pass
                        self.cancelled_tasks.discard(session_id)
                        return

                    try:
                        time_text = self.format_countdown_time(remaining)
                        bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=countdown_msg.message_id,
                            text=template['countdown'].format(time=time_text)
                        )
                    except Exception:
                        pass

                if session_id in self.cancelled_tasks:
                    self.cancelled_tasks.discard(session_id)
                    return

                # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                if question_message_id:
                    try:
                        bot.edit_message_reply_markup(
                            chat_id=chat_id,
                            message_id=question_message_id,
                            reply_markup=None
                        )
                    except Exception:
                        pass

                try:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=countdown_msg.message_id,
                        text=template['final']
                    )
                except Exception:
                    pass

                self._execute_timeout_callback(session_id, target_node, preset_config, callback, bot, chat_id, question_message_id)

                try:
                    time.sleep(1)
                    bot.delete_message(chat_id, countdown_msg.message_id)
                except Exception:
                    pass

            countdown_thread = threading.Thread(target=countdown_timer, daemon=True)
            countdown_thread.start()

            if session_id:
                self.active_timeouts[session_id] = countdown_thread

        # –¢–ò–•–ò–ô TIMEOUT (–±–µ–∑ countdown)
        else:
            print(f"[TIMING-ENGINE] SILENT timeout: {duration}s")

            pause_text = context.get('pause_text', '').strip()
            if pause_text:
                bot.send_message(chat_id, pause_text)

            def silent_timeout():
                time.sleep(duration)
                if session_id in self.cancelled_tasks:
                    self.cancelled_tasks.discard(session_id)
                    return

                self._execute_timeout_callback(session_id, target_node, preset_config, callback, bot, chat_id, question_message_id)

            timeout_thread = threading.Thread(target=silent_timeout, daemon=True)
            timeout_thread.start()

            if session_id:
                self.active_timeouts[session_id] = timeout_thread

    def _execute_timeout_callback(self, session_id: int, target_node: str, preset_config: dict,
                                  callback: Callable, bot=None, chat_id=None, question_message_id=None):
        """Callback —Å preset –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        if session_id in self.cancelled_tasks:
            self.cancelled_tasks.discard(session_id)
            return

        exposure_time = preset_config.get('exposure_time', 0)
        anti_flicker_delay = preset_config.get('anti_flicker_delay', 0)

        if exposure_time > 0:
            time.sleep(exposure_time)

        try:
            callback()
        except Exception as e:
            logger.error(f"Timeout callback error: {e}")

        if anti_flicker_delay > 0:
            time.sleep(anti_flicker_delay)

        # –û—á–∏—Å—Ç–∫–∞
        if session_id in self.debug_timers:
            del self.debug_timers[session_id]
        if session_id in self.active_timeouts:
            del self.active_timeouts[session_id]

    # –ó–ê–ì–û–¢–û–í–ö–ò –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    def _execute_remind(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–ó–ê–ì–û–¢–û–í–ö–ê: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print(f"[TIMING-ENGINE] Reminder system stub: {command.get('original', 'N/A')}")
        callback()

    def _execute_deadline(self, command: Dict[str, Any], callback: Callable, **context) -> None:
        """–ó–ê–ì–û–¢–û–í–ö–ê: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
        print(f"[TIMING-ENGINE] Deadline system stub: {command.get('original', 'N/A')}")
        callback()

    def _show_progress_bar_with_presets(self, bot, chat_id, duration, process_name,
                                        show_progress=True, exposure_time=1.5,
                                        anti_flicker_delay=1.0, action='delete'):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if show_progress:
                # –ü–†–û–ì–†–ï–°–°-–ë–ê–†
                msg = bot.send_message(chat_id, f"üöÄ {process_name}\n‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú 0%")
                steps = 5
                step_duration = duration / steps

                for i in range(1, steps + 1):
                    time.sleep(step_duration)
                    progress = int((i / steps) * 100)
                    filled = "üü©" * i
                    empty = "‚¨ú" * (steps - i)
                    try:
                        bot.edit_message_text(
                            chat_id=chat_id, message_id=msg.message_id,
                            text=f"üöÄ {process_name}\n{filled}{empty} {progress}%"
                        )
                    except Exception:
                        pass

                try:
                    bot.edit_message_text(
                        chat_id=chat_id, message_id=msg.message_id,
                        text=f"‚úÖ {process_name}\nüü©üü©üü©üü©üü© 100%"
                    )
                except Exception:
                    pass
            else:
                # –°–¢–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–û–ë–©–ï–ù–ò–ï
                msg = bot.send_message(chat_id, f"‚öôÔ∏è {process_name}...")
                time.sleep(duration)
                try:
                    bot.edit_message_text(
                        chat_id=chat_id, message_id=msg.message_id,
                        text=f"‚úÖ {process_name}"
                    )
                except Exception:
                    pass

            # –≠–ö–°–ü–û–ó–ò–¶–ò–Ø + –£–î–ê–õ–ï–ù–ò–ï + ANTI-FLICKER
            if exposure_time > 0:
                time.sleep(exposure_time)

            if action == 'delete':
                try:
                    bot.delete_message(chat_id=chat_id, message_id=msg.message_id)
                except Exception:
                    pass

            if anti_flicker_delay > 0:
                time.sleep(anti_flicker_delay)

        except Exception as e:
            logger.error(f"Process with presets failed: {e}")

    # ============================================================================
    # –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê DSL
    # ============================================================================

    def execute_timing(self, timing_config: str, callback: Callable, **context) -> None:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è timing –∫–æ–º–∞–Ω–¥"""
        if not self.enabled:
            callback()
            return

        try:
            commands = self._parse_timing_dsl(timing_config)
            self._execute_timing_commands(commands, callback, **context)
        except Exception as e:
            logger.error(f"TimingEngine error: {e}")
            callback()

    def _parse_timing_dsl(self, timing_config: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ DSL –∫–æ–º–∞–Ω–¥"""
        if not timing_config or timing_config.strip() == "":
            return []

        command_strings = [cmd.strip() for cmd in timing_config.split(';') if cmd.strip()]
        commands = []

        for cmd_str in command_strings:
            parsed = None

            # –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
            if re.match(r'^\d+(\.\d+)?(s)?$', cmd_str):
                parsed = self.parsers['basic_pause'](cmd_str)
            # process –∫–æ–º–∞–Ω–¥—ã
            elif cmd_str.startswith('process:'):
                parsed = self.parsers['process'](cmd_str)
            # timeout –∫–æ–º–∞–Ω–¥—ã
            elif cmd_str.startswith('timeout:'):
                parsed = self.parsers['timeout'](cmd_str)
            # typing –∫–æ–º–∞–Ω–¥—ã
            elif cmd_str.startswith('typing:'):
                parsed = self.parsers['typing'](cmd_str)
            # –ù–û–í–û–ï: daily –∫–æ–º–∞–Ω–¥—ã
            elif cmd_str.startswith('daily@'):
                parsed = self.parsers['daily'](cmd_str)
            # –ó–ê–ì–û–¢–û–í–ö–ò
            elif cmd_str.startswith('remind:'):
                parsed = self.parsers['remind'](cmd_str)
            elif cmd_str.startswith('deadline:'):
                parsed = self.parsers['deadline'](cmd_str)

            if parsed:
                commands.append(parsed)
            else:
                logger.warning(f"Unknown timing command: {cmd_str}")

        return commands

    def _execute_timing_commands(self, commands: List[Dict[str, Any]],
                                callback: Callable, **context) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"""
        if not commands:
            callback()
            return

        for command in commands:
            cmd_type = command.get('type')
            if cmd_type in self.executors:
                try:
                    self.executors[cmd_type](command, callback, **context)
                except Exception as e:
                    logger.error(f"Error executing {cmd_type}: {e}")
            else:
                logger.warning(f"No executor for command type: {cmd_type}")

    def process_timing(self, user_id: int, session_id: int, node_id: str,
                      timing_config: str, callback: Callable, **context) -> None:
        """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ timing –∫–æ–º–∞–Ω–¥"""
        if not self.enabled:
            callback()
            return

        try:
            enriched_context = dict(context)
            enriched_context['session_id'] = session_id
            enriched_context['node_id'] = node_id
            self.execute_timing(timing_config, callback, **enriched_context)
        except Exception as e:
            logger.error(f"process_timing error: {e}")
            callback()

    # ============================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï TIMEOUT - –°–¢–ê–ë–ò–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ============================================================================

    def cancel_timeout_task(self, session_id: int) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π timeout –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        self.cancelled_tasks.add(session_id)
        timer_key = f"timeout_{session_id}"

        if timer_key in self.active_timers:
            timer = self.active_timers[timer_key]
            timer.cancel()
            del self.active_timers[timer_key]

        if session_id in self.debug_timers:
            del self.debug_timers[session_id]
        if session_id in self.active_timeouts:
            del self.active_timeouts[session_id]

        return True

    def cleanup_timeout_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö timeout –∑–∞–¥–∞—á"""
        completed = [sid for sid, thread in self.active_timeouts.items() if not thread.is_alive()]
        for session_id in completed:
            del self.active_timeouts[session_id]
            self.cancelled_tasks.discard(session_id)

    def cancel_user_timers(self, user_id: int) -> None:
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        to_cancel = [key for key in self.active_timers.keys() if key.startswith(f"{user_id}_")]
        for key in to_cancel:
            timer = self.active_timers.pop(key)
            timer.cancel()

    # ============================================================================
    # –ë–î –û–ü–ï–†–ê–¶–ò–ò - –°–¢–ê–ë–ò–õ–¨–ù–´–ï –ú–ï–¢–û–î–´  
    # ============================================================================

    def _get_db_session(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ë–î"""
        try:
            return SessionLocal()
        except Exception as e:
            logger.error(f"Failed to create DB session: {e}")
            return None

    def save_timer_to_db(self, session_id: int, timer_type: str,
                        delay_seconds: int, message_text: str = "",
                        callback_node_id: str = "", callback_data: dict = None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä –≤ –ë–î"""
        if callback_data is None:
            callback_data = {}

        db = self._get_db_session()
        if not db:
            return None

        try:
            target_time = utc_now() + timedelta(seconds=delay_seconds)
            timer_record = ActiveTimer(
                session_id=session_id,
                timer_type=timer_type,
                target_timestamp=target_time,
                message_text=message_text,
                callback_node_id=callback_node_id,
                callback_data=callback_data,
                status='pending'
            )

            db.add(timer_record)
            db.commit()
            return timer_record.id

        except Exception as e:
            logger.error(f"Failed to save timer to DB: {e}")
            db.rollback()
            return None
        finally:
            db.close()

    def restore_timers_from_db(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã –∏–∑ –ë–î"""
        db = self._get_db_session()
        if not db:
            return

        try:
            pending_timers = db.query(ActiveTimer).filter(
                ActiveTimer.status == 'pending',
                ActiveTimer.target_timestamp > utc_now()
            ).all()

            for timer_record in pending_timers:
                remaining = (timer_record.target_timestamp - utc_now()).total_seconds()
                if remaining > 0:
                    timer_key = f"db_{timer_record.id}"
                    def create_callback(tid=timer_record.id):
                        return lambda: self._execute_db_timer(tid)
                    thread_timer = threading.Timer(remaining, create_callback())
                    thread_timer.start()
                    self.active_timers[timer_key] = thread_timer

        except Exception as e:
            logger.error(f"Failed to restore timers: {e}")
        finally:
            db.close()

    def _execute_db_timer(self, timer_id: int):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä –∏–∑ –ë–î"""
        db = self._get_db_session()
        if not db:
            return

        try:
            timer_record = db.query(ActiveTimer).filter(ActiveTimer.id == timer_id).first()
            if not timer_record:
                return

            timer_record.status = 'executed'
            db.commit()

            timer_key = f"db_{timer_id}"
            if timer_key in self.active_timers:
                del self.active_timers[timer_key]

        except Exception as e:
            logger.error(f"Failed to execute DB timer {timer_id}: {e}")
            db.rollback()
        finally:
            db.close()

    def cleanup_expired_timers(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –≤ –ë–î"""
        db = self._get_db_session()
        if not db:
            return

        try:
            from sqlalchemy import and_
            expired_count = db.query(ActiveTimer).filter(
                and_(ActiveTimer.status == 'pending', ActiveTimer.target_timestamp < utc_now())
            ).update({'status': 'expired'})
            db.commit()

        except Exception as e:
            logger.error(f"Failed to cleanup expired timers: {e}")
            db.rollback()
        finally:
            db.close()

    # ============================================================================
    # –°–¢–ê–¢–£–° –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï
    # ============================================================================

    def get_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å timing —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'stage': 'STABLE + SIMPLE DAILY',
            'enabled': self.enabled,
            'active_timers': len(self.active_timers),
            'active_timeouts': len(self.active_timeouts),
            'cancelled_tasks': len(self.cancelled_tasks),
            'debug_timers': len(self.debug_timers),
            'active_daily_configs': len(self.active_daily_configs),
            'daily_stats': len(self.daily_participation_stats),
            'available_parsers': list(self.parsers.keys()),
            'available_executors': list(self.executors.keys()),
            'available_presets': list(self.presets.keys()),
            'countdown_message_types': list(self.countdown_templates.keys())
        }

    def enable(self) -> None:
        """–í–∫–ª—é—á–∏—Ç—å timing —Å–∏—Å—Ç–µ–º—É"""
        self.enabled = True

    def disable(self) -> None:
        """–í—ã–∫–ª—é—á–∏—Ç—å timing —Å–∏—Å—Ç–µ–º—É"""
        self.enabled = False

        for timer in self.active_timers.values():
            timer.cancel()

        self.active_timers.clear()
        self.cancelled_tasks.clear()
        self.active_timeouts.clear()
        self.debug_timers.clear()
        self.active_daily_configs.clear()
        self.daily_participation_stats.clear()


# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ò –ü–£–ë–õ–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

timing_engine = TimingEngine()

def process_node_timing(user_id: int, session_id: int, node_id: str,
                       timing_config: str, callback: Callable, **context) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ timing –∫–æ–º–∞–Ω–¥ —É–∑–ª–∞"""
    return timing_engine.process_timing(user_id, session_id, node_id, timing_config, callback, **context)

def cancel_timeout_for_session(session_id: int) -> bool:
    """–ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã timeout"""
    return timing_engine.cancel_timeout_task(session_id)

def enable_timing() -> None:
    """–í–∫–ª—é—á–∏—Ç—å timing —Å–∏—Å—Ç–µ–º—É –≥–ª–æ–±–∞–ª—å–Ω–æ"""
    global TIMING_ENABLED
    TIMING_ENABLED = True
    timing_engine.enable()

def disable_timing() -> None:
    """–í—ã–∫–ª—é—á–∏—Ç—å timing —Å–∏—Å—Ç–µ–º—É –≥–ª–æ–±–∞–ª—å–Ω–æ"""
    global TIMING_ENABLED
    TIMING_ENABLED = False
    timing_engine.disable()

def get_timing_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å timing —Å–∏—Å—Ç–µ–º—ã"""
    return timing_engine.get_status()

def cleanup_completed_timeouts() -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ timeout –∑–∞–¥–∞—á–∏"""
    timing_engine.cleanup_timeout_tasks()

def cancel_user_timers(user_id: int) -> None:
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    timing_engine.cancel_user_timers(user_id)

def get_timing_engine_instance() -> TimingEngine:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä timing engine"""
    return timing_engine